//
// SpacesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SpacesAPI {

    /**
     * enum for parameter spaceFields
     */
    public enum SpaceFields_findSpaceById: String, CaseIterable {
        case createdAt = "created_at"
        case creatorId = "creator_id"
        case endedAt = "ended_at"
        case hostIds = "host_ids"
        case id = "id"
        case invitedUserIds = "invited_user_ids"
        case isTicketed = "is_ticketed"
        case lang = "lang"
        case participantCount = "participant_count"
        case scheduledStart = "scheduled_start"
        case speakerIds = "speaker_ids"
        case startedAt = "started_at"
        case state = "state"
        case subscriberCount = "subscriber_count"
        case title = "title"
        case topicIds = "topic_ids"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findSpaceById: String, CaseIterable {
        case creatorId = "creator_id"
        case hostIds = "host_ids"
        case invitedUserIds = "invited_user_ids"
        case speakerIds = "speaker_ids"
        case topicIds = "topic_ids"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findSpaceById: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter topicFields
     */
    public enum TopicFields_findSpaceById: String, CaseIterable {
        case description = "description"
        case id = "id"
        case name = "name"
    }

    /**
     Space lookup by Space ID
     
     - parameter id: (path) The ID of the Space to be retrieved. 
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter topicFields: (query) A comma separated list of Topic fields to display. (optional)
     - returns: Get2SpacesIdResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findSpaceById(id: String, spaceFields: [SpaceFields_findSpaceById]? = nil, expansions: [Expansions_findSpaceById]? = nil, userFields: [UserFields_findSpaceById]? = nil, topicFields: [TopicFields_findSpaceById]? = nil) async throws -> Get2SpacesIdResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = findSpaceByIdWithRequestBuilder(id: id, spaceFields: spaceFields, expansions: expansions, userFields: userFields, topicFields: topicFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Space lookup by Space ID
     - GET /2/spaces/{id}
     - Returns a variety of information about the Space specified by the requested ID
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - parameter id: (path) The ID of the Space to be retrieved. 
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter topicFields: (query) A comma separated list of Topic fields to display. (optional)
     - returns: RequestBuilder<Get2SpacesIdResponse> 
     */
    open class func findSpaceByIdWithRequestBuilder(id: String, spaceFields: [SpaceFields_findSpaceById]? = nil, expansions: [Expansions_findSpaceById]? = nil, userFields: [UserFields_findSpaceById]? = nil, topicFields: [TopicFields_findSpaceById]? = nil) -> RequestBuilder<Get2SpacesIdResponse> {
        var localVariablePath = "/2/spaces/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "space.fields": spaceFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "topic.fields": topicFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2SpacesIdResponse>.Type = OpenTwitterAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter spaceFields
     */
    public enum SpaceFields_findSpacesByCreatorIds: String, CaseIterable {
        case createdAt = "created_at"
        case creatorId = "creator_id"
        case endedAt = "ended_at"
        case hostIds = "host_ids"
        case id = "id"
        case invitedUserIds = "invited_user_ids"
        case isTicketed = "is_ticketed"
        case lang = "lang"
        case participantCount = "participant_count"
        case scheduledStart = "scheduled_start"
        case speakerIds = "speaker_ids"
        case startedAt = "started_at"
        case state = "state"
        case subscriberCount = "subscriber_count"
        case title = "title"
        case topicIds = "topic_ids"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findSpacesByCreatorIds: String, CaseIterable {
        case creatorId = "creator_id"
        case hostIds = "host_ids"
        case invitedUserIds = "invited_user_ids"
        case speakerIds = "speaker_ids"
        case topicIds = "topic_ids"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findSpacesByCreatorIds: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter topicFields
     */
    public enum TopicFields_findSpacesByCreatorIds: String, CaseIterable {
        case description = "description"
        case id = "id"
        case name = "name"
    }

    /**
     Space lookup by their creators
     
     - parameter userIds: (query) The IDs of Users to search through. 
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter topicFields: (query) A comma separated list of Topic fields to display. (optional)
     - returns: Get2SpacesByCreatorIdsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findSpacesByCreatorIds(userIds: [String], spaceFields: [SpaceFields_findSpacesByCreatorIds]? = nil, expansions: [Expansions_findSpacesByCreatorIds]? = nil, userFields: [UserFields_findSpacesByCreatorIds]? = nil, topicFields: [TopicFields_findSpacesByCreatorIds]? = nil) async throws -> Get2SpacesByCreatorIdsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = findSpacesByCreatorIdsWithRequestBuilder(userIds: userIds, spaceFields: spaceFields, expansions: expansions, userFields: userFields, topicFields: topicFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Space lookup by their creators
     - GET /2/spaces/by/creator_ids
     - Returns a variety of information about the Spaces created by the provided User IDs
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - parameter userIds: (query) The IDs of Users to search through. 
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter topicFields: (query) A comma separated list of Topic fields to display. (optional)
     - returns: RequestBuilder<Get2SpacesByCreatorIdsResponse> 
     */
    open class func findSpacesByCreatorIdsWithRequestBuilder(userIds: [String], spaceFields: [SpaceFields_findSpacesByCreatorIds]? = nil, expansions: [Expansions_findSpacesByCreatorIds]? = nil, userFields: [UserFields_findSpacesByCreatorIds]? = nil, topicFields: [TopicFields_findSpacesByCreatorIds]? = nil) -> RequestBuilder<Get2SpacesByCreatorIdsResponse> {
        let localVariablePath = "/2/spaces/by/creator_ids"
        let localVariableURLString = OpenTwitterAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "user_ids": userIds.encodeToJSON(),
            "space.fields": spaceFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "topic.fields": topicFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2SpacesByCreatorIdsResponse>.Type = OpenTwitterAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter spaceFields
     */
    public enum SpaceFields_findSpacesByIds: String, CaseIterable {
        case createdAt = "created_at"
        case creatorId = "creator_id"
        case endedAt = "ended_at"
        case hostIds = "host_ids"
        case id = "id"
        case invitedUserIds = "invited_user_ids"
        case isTicketed = "is_ticketed"
        case lang = "lang"
        case participantCount = "participant_count"
        case scheduledStart = "scheduled_start"
        case speakerIds = "speaker_ids"
        case startedAt = "started_at"
        case state = "state"
        case subscriberCount = "subscriber_count"
        case title = "title"
        case topicIds = "topic_ids"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findSpacesByIds: String, CaseIterable {
        case creatorId = "creator_id"
        case hostIds = "host_ids"
        case invitedUserIds = "invited_user_ids"
        case speakerIds = "speaker_ids"
        case topicIds = "topic_ids"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findSpacesByIds: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter topicFields
     */
    public enum TopicFields_findSpacesByIds: String, CaseIterable {
        case description = "description"
        case id = "id"
        case name = "name"
    }

    /**
     Space lookup up Space IDs
     
     - parameter ids: (query) The list of Space IDs to return. 
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter topicFields: (query) A comma separated list of Topic fields to display. (optional)
     - returns: Get2SpacesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findSpacesByIds(ids: [String], spaceFields: [SpaceFields_findSpacesByIds]? = nil, expansions: [Expansions_findSpacesByIds]? = nil, userFields: [UserFields_findSpacesByIds]? = nil, topicFields: [TopicFields_findSpacesByIds]? = nil) async throws -> Get2SpacesResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = findSpacesByIdsWithRequestBuilder(ids: ids, spaceFields: spaceFields, expansions: expansions, userFields: userFields, topicFields: topicFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Space lookup up Space IDs
     - GET /2/spaces
     - Returns a variety of information about the Spaces specified by the requested IDs
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - parameter ids: (query) The list of Space IDs to return. 
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter topicFields: (query) A comma separated list of Topic fields to display. (optional)
     - returns: RequestBuilder<Get2SpacesResponse> 
     */
    open class func findSpacesByIdsWithRequestBuilder(ids: [String], spaceFields: [SpaceFields_findSpacesByIds]? = nil, expansions: [Expansions_findSpacesByIds]? = nil, userFields: [UserFields_findSpacesByIds]? = nil, topicFields: [TopicFields_findSpacesByIds]? = nil) -> RequestBuilder<Get2SpacesResponse> {
        let localVariablePath = "/2/spaces"
        let localVariableURLString = OpenTwitterAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": ids.encodeToJSON(),
            "space.fields": spaceFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "topic.fields": topicFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2SpacesResponse>.Type = OpenTwitterAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter state
     */
    public enum State_searchSpaces: String, CaseIterable {
        case live = "live"
        case scheduled = "scheduled"
        case all = "all"
    }

    /**
     * enum for parameter spaceFields
     */
    public enum SpaceFields_searchSpaces: String, CaseIterable {
        case createdAt = "created_at"
        case creatorId = "creator_id"
        case endedAt = "ended_at"
        case hostIds = "host_ids"
        case id = "id"
        case invitedUserIds = "invited_user_ids"
        case isTicketed = "is_ticketed"
        case lang = "lang"
        case participantCount = "participant_count"
        case scheduledStart = "scheduled_start"
        case speakerIds = "speaker_ids"
        case startedAt = "started_at"
        case state = "state"
        case subscriberCount = "subscriber_count"
        case title = "title"
        case topicIds = "topic_ids"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_searchSpaces: String, CaseIterable {
        case creatorId = "creator_id"
        case hostIds = "host_ids"
        case invitedUserIds = "invited_user_ids"
        case speakerIds = "speaker_ids"
        case topicIds = "topic_ids"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_searchSpaces: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter topicFields
     */
    public enum TopicFields_searchSpaces: String, CaseIterable {
        case description = "description"
        case id = "id"
        case name = "name"
    }

    /**
     Search for Spaces
     
     - parameter query: (query) The search query. 
     - parameter state: (query) The state of Spaces to search for. (optional, default to .all)
     - parameter maxResults: (query) The number of results to return. (optional, default to 100)
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter topicFields: (query) A comma separated list of Topic fields to display. (optional)
     - returns: Get2SpacesSearchResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func searchSpaces(query: String, state: State_searchSpaces? = nil, maxResults: Int? = nil, spaceFields: [SpaceFields_searchSpaces]? = nil, expansions: [Expansions_searchSpaces]? = nil, userFields: [UserFields_searchSpaces]? = nil, topicFields: [TopicFields_searchSpaces]? = nil) async throws -> Get2SpacesSearchResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = searchSpacesWithRequestBuilder(query: query, state: state, maxResults: maxResults, spaceFields: spaceFields, expansions: expansions, userFields: userFields, topicFields: topicFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Search for Spaces
     - GET /2/spaces/search
     - Returns Spaces that match the provided query.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - parameter query: (query) The search query. 
     - parameter state: (query) The state of Spaces to search for. (optional, default to .all)
     - parameter maxResults: (query) The number of results to return. (optional, default to 100)
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter topicFields: (query) A comma separated list of Topic fields to display. (optional)
     - returns: RequestBuilder<Get2SpacesSearchResponse> 
     */
    open class func searchSpacesWithRequestBuilder(query: String, state: State_searchSpaces? = nil, maxResults: Int? = nil, spaceFields: [SpaceFields_searchSpaces]? = nil, expansions: [Expansions_searchSpaces]? = nil, userFields: [UserFields_searchSpaces]? = nil, topicFields: [TopicFields_searchSpaces]? = nil) -> RequestBuilder<Get2SpacesSearchResponse> {
        let localVariablePath = "/2/spaces/search"
        let localVariableURLString = OpenTwitterAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query.encodeToJSON(),
            "state": state?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "space.fields": spaceFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "topic.fields": topicFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2SpacesSearchResponse>.Type = OpenTwitterAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_spaceBuyers: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_spaceBuyers: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_spaceBuyers: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     Retrieve the list of Users who purchased a ticket to the given space
     
     - parameter id: (path) The ID of the Space to be retrieved. 
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2SpacesIdBuyersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func spaceBuyers(id: String, paginationToken: String? = nil, maxResults: Int? = nil, userFields: [UserFields_spaceBuyers]? = nil, expansions: [Expansions_spaceBuyers]? = nil, tweetFields: [TweetFields_spaceBuyers]? = nil) async throws -> Get2SpacesIdBuyersResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = spaceBuyersWithRequestBuilder(id: id, paginationToken: paginationToken, maxResults: maxResults, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Retrieve the list of Users who purchased a ticket to the given space
     - GET /2/spaces/{id}/buyers
     - Retrieves the list of Users who purchased a ticket to the given space
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - parameter id: (path) The ID of the Space to be retrieved. 
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2SpacesIdBuyersResponse> 
     */
    open class func spaceBuyersWithRequestBuilder(id: String, paginationToken: String? = nil, maxResults: Int? = nil, userFields: [UserFields_spaceBuyers]? = nil, expansions: [Expansions_spaceBuyers]? = nil, tweetFields: [TweetFields_spaceBuyers]? = nil) -> RequestBuilder<Get2SpacesIdBuyersResponse> {
        var localVariablePath = "/2/spaces/{id}/buyers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pagination_token": paginationToken?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2SpacesIdBuyersResponse>.Type = OpenTwitterAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_spaceTweets: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_spaceTweets: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_spaceTweets: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_spaceTweets: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_spaceTweets: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_spaceTweets: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     Retrieve Tweets from a Space.
     
     - parameter id: (path) The ID of the Space to be retrieved. 
     - parameter maxResults: (query) The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: Get2SpacesIdTweetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func spaceTweets(id: String, maxResults: Int? = nil, tweetFields: [TweetFields_spaceTweets]? = nil, expansions: [Expansions_spaceTweets]? = nil, mediaFields: [MediaFields_spaceTweets]? = nil, pollFields: [PollFields_spaceTweets]? = nil, userFields: [UserFields_spaceTweets]? = nil, placeFields: [PlaceFields_spaceTweets]? = nil) async throws -> Get2SpacesIdTweetsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = spaceTweetsWithRequestBuilder(id: id, maxResults: maxResults, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Retrieve Tweets from a Space.
     - GET /2/spaces/{id}/tweets
     - Retrieves Tweets shared in the specified Space.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - parameter id: (path) The ID of the Space to be retrieved. 
     - parameter maxResults: (query) The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<Get2SpacesIdTweetsResponse> 
     */
    open class func spaceTweetsWithRequestBuilder(id: String, maxResults: Int? = nil, tweetFields: [TweetFields_spaceTweets]? = nil, expansions: [Expansions_spaceTweets]? = nil, mediaFields: [MediaFields_spaceTweets]? = nil, pollFields: [PollFields_spaceTweets]? = nil, userFields: [UserFields_spaceTweets]? = nil, placeFields: [PlaceFields_spaceTweets]? = nil) -> RequestBuilder<Get2SpacesIdTweetsResponse> {
        var localVariablePath = "/2/spaces/{id}/tweets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2SpacesIdTweetsResponse>.Type = OpenTwitterAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
