//
// FullTextEntitiesAnnotationsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Annotation for entities based on the Tweet text. */
public struct FullTextEntitiesAnnotationsInner: Codable, JSONEncodable, Hashable {

    /** Index (zero-based) at which position this entity ends.  The index is inclusive. */
    public var end: Int
    /** Index (zero-based) at which position this entity starts.  The index is inclusive. */
    public var start: Int
    /** Text used to determine annotation. */
    public var normalizedText: String?
    /** Confidence factor for annotation type. */
    public var probability: Double?
    /** Annotation type. */
    public var type: String?

    public init(end: Int, start: Int, normalizedText: String? = nil, probability: Double? = nil, type: String? = nil) {
        self.end = end
        self.start = start
        self.normalizedText = normalizedText
        self.probability = probability
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case end
        case start
        case normalizedText = "normalized_text"
        case probability
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(end, forKey: .end)
        try container.encode(start, forKey: .start)
        try container.encodeIfPresent(normalizedText, forKey: .normalizedText)
        try container.encodeIfPresent(probability, forKey: .probability)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

