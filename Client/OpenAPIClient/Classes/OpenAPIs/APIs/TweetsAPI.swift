//
// TweetsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TweetsAPI {

    /**
     Add/Delete rules
     
     - parameter addOrDeleteRulesRequest: (body)  
     - parameter dryRun: (query) Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes. (optional)
     - returns: AddOrDeleteRulesResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func addOrDeleteRules(addOrDeleteRulesRequest: AddOrDeleteRulesRequest, dryRun: Bool? = nil) async throws -> AddOrDeleteRulesResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = addOrDeleteRulesWithRequestBuilder(addOrDeleteRulesRequest: addOrDeleteRulesRequest, dryRun: dryRun).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Add/Delete rules
     - POST /2/tweets/search/stream/rules
     - Add or delete rules from a User's active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter addOrDeleteRulesRequest: (body)  
     - parameter dryRun: (query) Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes. (optional)
     - returns: RequestBuilder<AddOrDeleteRulesResponse> 
     */
    open class func addOrDeleteRulesWithRequestBuilder(addOrDeleteRulesRequest: AddOrDeleteRulesRequest, dryRun: Bool? = nil) -> RequestBuilder<AddOrDeleteRulesResponse> {
        let localVariablePath = "/2/tweets/search/stream/rules"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addOrDeleteRulesRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "dry_run": dryRun?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddOrDeleteRulesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Creation of a Tweet
     
     - parameter tweetCreateRequest: (body)  
     - returns: TweetCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createTweet(tweetCreateRequest: TweetCreateRequest) async throws -> TweetCreateResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = createTweetWithRequestBuilder(tweetCreateRequest: tweetCreateRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Creation of a Tweet
     - POST /2/tweets
     - Causes the User to create a Tweet under the authorized account.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter tweetCreateRequest: (body)  
     - returns: RequestBuilder<TweetCreateResponse> 
     */
    open class func createTweetWithRequestBuilder(tweetCreateRequest: TweetCreateRequest) -> RequestBuilder<TweetCreateResponse> {
        let localVariablePath = "/2/tweets"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tweetCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TweetCreateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Tweet delete by Tweet ID
     
     - parameter id: (path) The ID of the Tweet to be deleted. 
     - returns: TweetDeleteResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteTweetById(id: String) async throws -> TweetDeleteResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = deleteTweetByIdWithRequestBuilder(id: id).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Tweet delete by Tweet ID
     - DELETE /2/tweets/{id}
     - Delete specified Tweet (in the path) by ID.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the Tweet to be deleted. 
     - returns: RequestBuilder<TweetDeleteResponse> 
     */
    open class func deleteTweetByIdWithRequestBuilder(id: String) -> RequestBuilder<TweetDeleteResponse> {
        var localVariablePath = "/2/tweets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TweetDeleteResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findTweetById: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findTweetById: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_findTweetById: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_findTweetById: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findTweetById: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_findTweetById: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     Tweet lookup by Tweet ID
     
     - parameter id: (path) A single Tweet ID. 
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: Get2TweetsIdResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findTweetById(id: String, tweetFields: [TweetFields_findTweetById]? = nil, expansions: [Expansions_findTweetById]? = nil, mediaFields: [MediaFields_findTweetById]? = nil, pollFields: [PollFields_findTweetById]? = nil, userFields: [UserFields_findTweetById]? = nil, placeFields: [PlaceFields_findTweetById]? = nil) async throws -> Get2TweetsIdResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = findTweetByIdWithRequestBuilder(id: id, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Tweet lookup by Tweet ID
     - GET /2/tweets/{id}
     - Returns a variety of information about the Tweet specified by the requested ID.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) A single Tweet ID. 
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<Get2TweetsIdResponse> 
     */
    open class func findTweetByIdWithRequestBuilder(id: String, tweetFields: [TweetFields_findTweetById]? = nil, expansions: [Expansions_findTweetById]? = nil, mediaFields: [MediaFields_findTweetById]? = nil, pollFields: [PollFields_findTweetById]? = nil, userFields: [UserFields_findTweetById]? = nil, placeFields: [PlaceFields_findTweetById]? = nil) -> RequestBuilder<Get2TweetsIdResponse> {
        var localVariablePath = "/2/tweets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2TweetsIdResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findTweetsById: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findTweetsById: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_findTweetsById: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_findTweetsById: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findTweetsById: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_findTweetsById: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     Tweet lookup by Tweet IDs
     
     - parameter ids: (query) A comma separated list of Tweet IDs. Up to 100 are allowed in a single request. 
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: Get2TweetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findTweetsById(ids: [String], tweetFields: [TweetFields_findTweetsById]? = nil, expansions: [Expansions_findTweetsById]? = nil, mediaFields: [MediaFields_findTweetsById]? = nil, pollFields: [PollFields_findTweetsById]? = nil, userFields: [UserFields_findTweetsById]? = nil, placeFields: [PlaceFields_findTweetsById]? = nil) async throws -> Get2TweetsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = findTweetsByIdWithRequestBuilder(ids: ids, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Tweet lookup by Tweet IDs
     - GET /2/tweets
     - Returns a variety of information about the Tweet specified by the requested ID.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter ids: (query) A comma separated list of Tweet IDs. Up to 100 are allowed in a single request. 
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<Get2TweetsResponse> 
     */
    open class func findTweetsByIdWithRequestBuilder(ids: [String], tweetFields: [TweetFields_findTweetsById]? = nil, expansions: [Expansions_findTweetsById]? = nil, mediaFields: [MediaFields_findTweetsById]? = nil, pollFields: [PollFields_findTweetsById]? = nil, userFields: [UserFields_findTweetsById]? = nil, placeFields: [PlaceFields_findTweetsById]? = nil) -> RequestBuilder<Get2TweetsResponse> {
        let localVariablePath = "/2/tweets"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": ids.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2TweetsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter exclude
     */
    public enum Exclude_findTweetsThatQuoteATweet: String, CaseIterable {
        case replies = "replies"
        case retweets = "retweets"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findTweetsThatQuoteATweet: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findTweetsThatQuoteATweet: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_findTweetsThatQuoteATweet: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_findTweetsThatQuoteATweet: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findTweetsThatQuoteATweet: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_findTweetsThatQuoteATweet: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     Retrieve Tweets that quote a Tweet.
     
     - parameter id: (path) A single Tweet ID. 
     - parameter maxResults: (query) The maximum number of results to be returned. (optional, default to 10)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter exclude: (query) The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: Get2TweetsIdQuoteTweetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findTweetsThatQuoteATweet(id: String, maxResults: Int? = nil, paginationToken: String? = nil, exclude: [Exclude_findTweetsThatQuoteATweet]? = nil, tweetFields: [TweetFields_findTweetsThatQuoteATweet]? = nil, expansions: [Expansions_findTweetsThatQuoteATweet]? = nil, mediaFields: [MediaFields_findTweetsThatQuoteATweet]? = nil, pollFields: [PollFields_findTweetsThatQuoteATweet]? = nil, userFields: [UserFields_findTweetsThatQuoteATweet]? = nil, placeFields: [PlaceFields_findTweetsThatQuoteATweet]? = nil) async throws -> Get2TweetsIdQuoteTweetsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = findTweetsThatQuoteATweetWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, exclude: exclude, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Retrieve Tweets that quote a Tweet.
     - GET /2/tweets/{id}/quote_tweets
     - Returns a variety of information about each Tweet that quotes the Tweet specified by the requested ID.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) A single Tweet ID. 
     - parameter maxResults: (query) The maximum number of results to be returned. (optional, default to 10)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter exclude: (query) The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<Get2TweetsIdQuoteTweetsResponse> 
     */
    open class func findTweetsThatQuoteATweetWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, exclude: [Exclude_findTweetsThatQuoteATweet]? = nil, tweetFields: [TweetFields_findTweetsThatQuoteATweet]? = nil, expansions: [Expansions_findTweetsThatQuoteATweet]? = nil, mediaFields: [MediaFields_findTweetsThatQuoteATweet]? = nil, pollFields: [PollFields_findTweetsThatQuoteATweet]? = nil, userFields: [UserFields_findTweetsThatQuoteATweet]? = nil, placeFields: [PlaceFields_findTweetsThatQuoteATweet]? = nil) -> RequestBuilder<Get2TweetsIdQuoteTweetsResponse> {
        var localVariablePath = "/2/tweets/{id}/quote_tweets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "exclude": exclude?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2TweetsIdQuoteTweetsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Rules lookup
     
     - parameter ids: (query) A comma-separated list of Rule IDs. (optional)
     - parameter maxResults: (query) The maximum number of results. (optional, default to 1000)
     - parameter paginationToken: (query) This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results. (optional)
     - returns: RulesLookupResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getRules(ids: [String]? = nil, maxResults: Int? = nil, paginationToken: String? = nil) async throws -> RulesLookupResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = getRulesWithRequestBuilder(ids: ids, maxResults: maxResults, paginationToken: paginationToken).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Rules lookup
     - GET /2/tweets/search/stream/rules
     - Returns rules from a User's active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter ids: (query) A comma-separated list of Rule IDs. (optional)
     - parameter maxResults: (query) The maximum number of results. (optional, default to 1000)
     - parameter paginationToken: (query) This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results. (optional)
     - returns: RequestBuilder<RulesLookupResponse> 
     */
    open class func getRulesWithRequestBuilder(ids: [String]? = nil, maxResults: Int? = nil, paginationToken: String? = nil) -> RequestBuilder<RulesLookupResponse> {
        let localVariablePath = "/2/tweets/search/stream/rules"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": ids?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RulesLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Hide replies
     
     - parameter tweetId: (path) The ID of the reply that you want to hide or unhide. 
     - parameter tweetHideRequest: (body)  (optional)
     - returns: TweetHideResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func hideReplyById(tweetId: String, tweetHideRequest: TweetHideRequest? = nil) async throws -> TweetHideResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = hideReplyByIdWithRequestBuilder(tweetId: tweetId, tweetHideRequest: tweetHideRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Hide replies
     - PUT /2/tweets/{tweet_id}/hidden
     - Hides or unhides a reply to an owned conversation.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter tweetId: (path) The ID of the reply that you want to hide or unhide. 
     - parameter tweetHideRequest: (body)  (optional)
     - returns: RequestBuilder<TweetHideResponse> 
     */
    open class func hideReplyByIdWithRequestBuilder(tweetId: String, tweetHideRequest: TweetHideRequest? = nil) -> RequestBuilder<TweetHideResponse> {
        var localVariablePath = "/2/tweets/{tweet_id}/hidden"
        let tweetIdPreEscape = "\(APIHelper.mapValueToPathItem(tweetId))"
        let tweetIdPostEscape = tweetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tweet_id}", with: tweetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tweetHideRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TweetHideResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_listsIdTweets: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_listsIdTweets: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_listsIdTweets: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_listsIdTweets: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_listsIdTweets: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_listsIdTweets: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     List Tweets timeline by List ID.
     
     - parameter id: (path) The ID of the List. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: Get2ListsIdTweetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listsIdTweets(id: String, maxResults: Int? = nil, paginationToken: String? = nil, tweetFields: [TweetFields_listsIdTweets]? = nil, expansions: [Expansions_listsIdTweets]? = nil, mediaFields: [MediaFields_listsIdTweets]? = nil, pollFields: [PollFields_listsIdTweets]? = nil, userFields: [UserFields_listsIdTweets]? = nil, placeFields: [PlaceFields_listsIdTweets]? = nil) async throws -> Get2ListsIdTweetsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listsIdTweetsWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     List Tweets timeline by List ID.
     - GET /2/lists/{id}/tweets
     - Returns a list of Tweets associated with the provided List ID.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<Get2ListsIdTweetsResponse> 
     */
    open class func listsIdTweetsWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, tweetFields: [TweetFields_listsIdTweets]? = nil, expansions: [Expansions_listsIdTweets]? = nil, mediaFields: [MediaFields_listsIdTweets]? = nil, pollFields: [PollFields_listsIdTweets]? = nil, userFields: [UserFields_listsIdTweets]? = nil, placeFields: [PlaceFields_listsIdTweets]? = nil) -> RequestBuilder<Get2ListsIdTweetsResponse> {
        var localVariablePath = "/2/lists/{id}/tweets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2ListsIdTweetsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_sampleStream: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_sampleStream: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_sampleStream: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_sampleStream: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_sampleStream: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_sampleStream: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     Sample stream
     
     - parameter backfillMinutes: (query) The number of minutes of backfill requested. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: StreamingTweetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func sampleStream(backfillMinutes: Int? = nil, tweetFields: [TweetFields_sampleStream]? = nil, expansions: [Expansions_sampleStream]? = nil, mediaFields: [MediaFields_sampleStream]? = nil, pollFields: [PollFields_sampleStream]? = nil, userFields: [UserFields_sampleStream]? = nil, placeFields: [PlaceFields_sampleStream]? = nil) async throws -> StreamingTweetResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = sampleStreamWithRequestBuilder(backfillMinutes: backfillMinutes, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Sample stream
     - GET /2/tweets/sample/stream
     - Streams a deterministic 1% of public Tweets.
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter backfillMinutes: (query) The number of minutes of backfill requested. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<StreamingTweetResponse> 
     */
    open class func sampleStreamWithRequestBuilder(backfillMinutes: Int? = nil, tweetFields: [TweetFields_sampleStream]? = nil, expansions: [Expansions_sampleStream]? = nil, mediaFields: [MediaFields_sampleStream]? = nil, pollFields: [PollFields_sampleStream]? = nil, userFields: [UserFields_sampleStream]? = nil, placeFields: [PlaceFields_sampleStream]? = nil) -> RequestBuilder<StreamingTweetResponse> {
        let localVariablePath = "/2/tweets/sample/stream"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "backfill_minutes": backfillMinutes?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StreamingTweetResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_searchStream: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_searchStream: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_searchStream: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_searchStream: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_searchStream: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_searchStream: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     Filtered stream
     
     - parameter backfillMinutes: (query) The number of minutes of backfill requested. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: FilteredStreamingTweetResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func searchStream(backfillMinutes: Int? = nil, tweetFields: [TweetFields_searchStream]? = nil, expansions: [Expansions_searchStream]? = nil, mediaFields: [MediaFields_searchStream]? = nil, pollFields: [PollFields_searchStream]? = nil, userFields: [UserFields_searchStream]? = nil, placeFields: [PlaceFields_searchStream]? = nil) async throws -> FilteredStreamingTweetResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = searchStreamWithRequestBuilder(backfillMinutes: backfillMinutes, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Filtered stream
     - GET /2/tweets/search/stream
     - Streams Tweets matching the stream's active rule set.
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter backfillMinutes: (query) The number of minutes of backfill requested. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<FilteredStreamingTweetResponse> 
     */
    open class func searchStreamWithRequestBuilder(backfillMinutes: Int? = nil, tweetFields: [TweetFields_searchStream]? = nil, expansions: [Expansions_searchStream]? = nil, mediaFields: [MediaFields_searchStream]? = nil, pollFields: [PollFields_searchStream]? = nil, userFields: [UserFields_searchStream]? = nil, placeFields: [PlaceFields_searchStream]? = nil) -> RequestBuilder<FilteredStreamingTweetResponse> {
        let localVariablePath = "/2/tweets/search/stream"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "backfill_minutes": backfillMinutes?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FilteredStreamingTweetResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_spaceBuyers: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_spaceBuyers: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_spaceBuyers: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     Retrieve the list of Users who purchased a ticket to the given space
     
     - parameter id: (path) The ID of the Space to be retrieved. 
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2SpacesIdBuyersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func spaceBuyers(id: String, paginationToken: String? = nil, maxResults: Int? = nil, userFields: [UserFields_spaceBuyers]? = nil, expansions: [Expansions_spaceBuyers]? = nil, tweetFields: [TweetFields_spaceBuyers]? = nil) async throws -> Get2SpacesIdBuyersResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = spaceBuyersWithRequestBuilder(id: id, paginationToken: paginationToken, maxResults: maxResults, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Retrieve the list of Users who purchased a ticket to the given space
     - GET /2/spaces/{id}/buyers
     - Retrieves the list of Users who purchased a ticket to the given space
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - parameter id: (path) The ID of the Space to be retrieved. 
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2SpacesIdBuyersResponse> 
     */
    open class func spaceBuyersWithRequestBuilder(id: String, paginationToken: String? = nil, maxResults: Int? = nil, userFields: [UserFields_spaceBuyers]? = nil, expansions: [Expansions_spaceBuyers]? = nil, tweetFields: [TweetFields_spaceBuyers]? = nil) -> RequestBuilder<Get2SpacesIdBuyersResponse> {
        var localVariablePath = "/2/spaces/{id}/buyers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pagination_token": paginationToken?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2SpacesIdBuyersResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_spaceTweets: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_spaceTweets: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_spaceTweets: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_spaceTweets: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_spaceTweets: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_spaceTweets: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     Retrieve Tweets from a Space.
     
     - parameter id: (path) The ID of the Space to be retrieved. 
     - parameter maxResults: (query) The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: Get2SpacesIdTweetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func spaceTweets(id: String, maxResults: Int? = nil, tweetFields: [TweetFields_spaceTweets]? = nil, expansions: [Expansions_spaceTweets]? = nil, mediaFields: [MediaFields_spaceTweets]? = nil, pollFields: [PollFields_spaceTweets]? = nil, userFields: [UserFields_spaceTweets]? = nil, placeFields: [PlaceFields_spaceTweets]? = nil) async throws -> Get2SpacesIdTweetsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = spaceTweetsWithRequestBuilder(id: id, maxResults: maxResults, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Retrieve Tweets from a Space.
     - GET /2/spaces/{id}/tweets
     - Retrieves Tweets shared in the specified Space.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - parameter id: (path) The ID of the Space to be retrieved. 
     - parameter maxResults: (query) The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100. (optional, default to 100)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<Get2SpacesIdTweetsResponse> 
     */
    open class func spaceTweetsWithRequestBuilder(id: String, maxResults: Int? = nil, tweetFields: [TweetFields_spaceTweets]? = nil, expansions: [Expansions_spaceTweets]? = nil, mediaFields: [MediaFields_spaceTweets]? = nil, pollFields: [PollFields_spaceTweets]? = nil, userFields: [UserFields_spaceTweets]? = nil, placeFields: [PlaceFields_spaceTweets]? = nil) -> RequestBuilder<Get2SpacesIdTweetsResponse> {
        var localVariablePath = "/2/spaces/{id}/tweets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2SpacesIdTweetsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_tweetCountsFullArchiveSearch: String, CaseIterable {
        case minute = "minute"
        case hour = "hour"
        case day = "day"
    }

    /**
     * enum for parameter searchCountFields
     */
    public enum SearchCountFields_tweetCountsFullArchiveSearch: String, CaseIterable {
        case end = "end"
        case start = "start"
        case tweetCount = "tweet_count"
    }

    /**
     Full archive search counts
     
     - parameter query: (query) One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter granularity: (query) The granularity for the search counts results. (optional, default to .hour)
     - parameter searchCountFields: (query) A comma separated list of SearchCount fields to display. (optional)
     - returns: Get2TweetsCountsAllResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tweetCountsFullArchiveSearch(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, nextToken: String? = nil, paginationToken: String? = nil, granularity: Granularity_tweetCountsFullArchiveSearch? = nil, searchCountFields: [SearchCountFields_tweetCountsFullArchiveSearch]? = nil) async throws -> Get2TweetsCountsAllResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = tweetCountsFullArchiveSearchWithRequestBuilder(query: query, startTime: startTime, endTime: endTime, sinceId: sinceId, untilId: untilId, nextToken: nextToken, paginationToken: paginationToken, granularity: granularity, searchCountFields: searchCountFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Full archive search counts
     - GET /2/tweets/counts/all
     - Returns Tweet Counts that match a search query.
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter query: (query) One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter granularity: (query) The granularity for the search counts results. (optional, default to .hour)
     - parameter searchCountFields: (query) A comma separated list of SearchCount fields to display. (optional)
     - returns: RequestBuilder<Get2TweetsCountsAllResponse> 
     */
    open class func tweetCountsFullArchiveSearchWithRequestBuilder(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, nextToken: String? = nil, paginationToken: String? = nil, granularity: Granularity_tweetCountsFullArchiveSearch? = nil, searchCountFields: [SearchCountFields_tweetCountsFullArchiveSearch]? = nil) -> RequestBuilder<Get2TweetsCountsAllResponse> {
        let localVariablePath = "/2/tweets/counts/all"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query.encodeToJSON(),
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "since_id": sinceId?.encodeToJSON(),
            "until_id": untilId?.encodeToJSON(),
            "next_token": nextToken?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "granularity": granularity?.encodeToJSON(),
            "search_count.fields": searchCountFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2TweetsCountsAllResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter granularity
     */
    public enum Granularity_tweetCountsRecentSearch: String, CaseIterable {
        case minute = "minute"
        case hour = "hour"
        case day = "day"
    }

    /**
     * enum for parameter searchCountFields
     */
    public enum SearchCountFields_tweetCountsRecentSearch: String, CaseIterable {
        case end = "end"
        case start = "start"
        case tweetCount = "tweet_count"
    }

    /**
     Recent search counts
     
     - parameter query: (query) One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter granularity: (query) The granularity for the search counts results. (optional, default to .hour)
     - parameter searchCountFields: (query) A comma separated list of SearchCount fields to display. (optional)
     - returns: Get2TweetsCountsRecentResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tweetCountsRecentSearch(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, nextToken: String? = nil, paginationToken: String? = nil, granularity: Granularity_tweetCountsRecentSearch? = nil, searchCountFields: [SearchCountFields_tweetCountsRecentSearch]? = nil) async throws -> Get2TweetsCountsRecentResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = tweetCountsRecentSearchWithRequestBuilder(query: query, startTime: startTime, endTime: endTime, sinceId: sinceId, untilId: untilId, nextToken: nextToken, paginationToken: paginationToken, granularity: granularity, searchCountFields: searchCountFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Recent search counts
     - GET /2/tweets/counts/recent
     - Returns Tweet Counts from the last 7 days that match a search query.
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter query: (query) One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter granularity: (query) The granularity for the search counts results. (optional, default to .hour)
     - parameter searchCountFields: (query) A comma separated list of SearchCount fields to display. (optional)
     - returns: RequestBuilder<Get2TweetsCountsRecentResponse> 
     */
    open class func tweetCountsRecentSearchWithRequestBuilder(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, nextToken: String? = nil, paginationToken: String? = nil, granularity: Granularity_tweetCountsRecentSearch? = nil, searchCountFields: [SearchCountFields_tweetCountsRecentSearch]? = nil) -> RequestBuilder<Get2TweetsCountsRecentResponse> {
        let localVariablePath = "/2/tweets/counts/recent"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query.encodeToJSON(),
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "since_id": sinceId?.encodeToJSON(),
            "until_id": untilId?.encodeToJSON(),
            "next_token": nextToken?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "granularity": granularity?.encodeToJSON(),
            "search_count.fields": searchCountFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2TweetsCountsRecentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter sortOrder
     */
    public enum SortOrder_tweetsFullarchiveSearch: String, CaseIterable {
        case recency = "recency"
        case relevancy = "relevancy"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_tweetsFullarchiveSearch: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_tweetsFullarchiveSearch: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_tweetsFullarchiveSearch: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_tweetsFullarchiveSearch: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_tweetsFullarchiveSearch: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_tweetsFullarchiveSearch: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     Full-archive search
     
     - parameter query: (query) One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter maxResults: (query) The maximum number of search results to be returned by a request. (optional, default to 10)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter sortOrder: (query) This order in which to return results. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: Get2TweetsSearchAllResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tweetsFullarchiveSearch(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, paginationToken: String? = nil, sortOrder: SortOrder_tweetsFullarchiveSearch? = nil, tweetFields: [TweetFields_tweetsFullarchiveSearch]? = nil, expansions: [Expansions_tweetsFullarchiveSearch]? = nil, mediaFields: [MediaFields_tweetsFullarchiveSearch]? = nil, pollFields: [PollFields_tweetsFullarchiveSearch]? = nil, userFields: [UserFields_tweetsFullarchiveSearch]? = nil, placeFields: [PlaceFields_tweetsFullarchiveSearch]? = nil) async throws -> Get2TweetsSearchAllResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = tweetsFullarchiveSearchWithRequestBuilder(query: query, startTime: startTime, endTime: endTime, sinceId: sinceId, untilId: untilId, maxResults: maxResults, nextToken: nextToken, paginationToken: paginationToken, sortOrder: sortOrder, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Full-archive search
     - GET /2/tweets/search/all
     - Returns Tweets that match a search query.
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter query: (query) One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter maxResults: (query) The maximum number of search results to be returned by a request. (optional, default to 10)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter sortOrder: (query) This order in which to return results. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<Get2TweetsSearchAllResponse> 
     */
    open class func tweetsFullarchiveSearchWithRequestBuilder(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, paginationToken: String? = nil, sortOrder: SortOrder_tweetsFullarchiveSearch? = nil, tweetFields: [TweetFields_tweetsFullarchiveSearch]? = nil, expansions: [Expansions_tweetsFullarchiveSearch]? = nil, mediaFields: [MediaFields_tweetsFullarchiveSearch]? = nil, pollFields: [PollFields_tweetsFullarchiveSearch]? = nil, userFields: [UserFields_tweetsFullarchiveSearch]? = nil, placeFields: [PlaceFields_tweetsFullarchiveSearch]? = nil) -> RequestBuilder<Get2TweetsSearchAllResponse> {
        let localVariablePath = "/2/tweets/search/all"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query.encodeToJSON(),
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "since_id": sinceId?.encodeToJSON(),
            "until_id": untilId?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "next_token": nextToken?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "sort_order": sortOrder?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2TweetsSearchAllResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter sortOrder
     */
    public enum SortOrder_tweetsRecentSearch: String, CaseIterable {
        case recency = "recency"
        case relevancy = "relevancy"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_tweetsRecentSearch: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_tweetsRecentSearch: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_tweetsRecentSearch: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_tweetsRecentSearch: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_tweetsRecentSearch: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_tweetsRecentSearch: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     Recent search
     
     - parameter query: (query) One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter maxResults: (query) The maximum number of search results to be returned by a request. (optional, default to 10)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter sortOrder: (query) This order in which to return results. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: Get2TweetsSearchRecentResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tweetsRecentSearch(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, paginationToken: String? = nil, sortOrder: SortOrder_tweetsRecentSearch? = nil, tweetFields: [TweetFields_tweetsRecentSearch]? = nil, expansions: [Expansions_tweetsRecentSearch]? = nil, mediaFields: [MediaFields_tweetsRecentSearch]? = nil, pollFields: [PollFields_tweetsRecentSearch]? = nil, userFields: [UserFields_tweetsRecentSearch]? = nil, placeFields: [PlaceFields_tweetsRecentSearch]? = nil) async throws -> Get2TweetsSearchRecentResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = tweetsRecentSearchWithRequestBuilder(query: query, startTime: startTime, endTime: endTime, sinceId: sinceId, untilId: untilId, maxResults: maxResults, nextToken: nextToken, paginationToken: paginationToken, sortOrder: sortOrder, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Recent search
     - GET /2/tweets/search/recent
     - Returns Tweets from the last 7 days that match a search query.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter query: (query) One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter maxResults: (query) The maximum number of search results to be returned by a request. (optional, default to 10)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter sortOrder: (query) This order in which to return results. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<Get2TweetsSearchRecentResponse> 
     */
    open class func tweetsRecentSearchWithRequestBuilder(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, paginationToken: String? = nil, sortOrder: SortOrder_tweetsRecentSearch? = nil, tweetFields: [TweetFields_tweetsRecentSearch]? = nil, expansions: [Expansions_tweetsRecentSearch]? = nil, mediaFields: [MediaFields_tweetsRecentSearch]? = nil, pollFields: [PollFields_tweetsRecentSearch]? = nil, userFields: [UserFields_tweetsRecentSearch]? = nil, placeFields: [PlaceFields_tweetsRecentSearch]? = nil) -> RequestBuilder<Get2TweetsSearchRecentResponse> {
        let localVariablePath = "/2/tweets/search/recent"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query.encodeToJSON(),
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "since_id": sinceId?.encodeToJSON(),
            "until_id": untilId?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "next_token": nextToken?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "sort_order": sortOrder?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2TweetsSearchRecentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Causes the User (in the path) to like the specified Tweet
     
     - parameter id: (path) The ID of the authenticated source User that is requesting to like the Tweet. 
     - parameter usersLikesCreateRequest: (body)  (optional)
     - returns: UsersLikesCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdLike(id: String, usersLikesCreateRequest: UsersLikesCreateRequest? = nil) async throws -> UsersLikesCreateResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdLikeWithRequestBuilder(id: id, usersLikesCreateRequest: usersLikesCreateRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Causes the User (in the path) to like the specified Tweet
     - POST /2/users/{id}/likes
     - Causes the User (in the path) to like the specified Tweet. The User in the path must match the User context authorizing the request.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User that is requesting to like the Tweet. 
     - parameter usersLikesCreateRequest: (body)  (optional)
     - returns: RequestBuilder<UsersLikesCreateResponse> 
     */
    open class func usersIdLikeWithRequestBuilder(id: String, usersLikesCreateRequest: UsersLikesCreateRequest? = nil) -> RequestBuilder<UsersLikesCreateResponse> {
        var localVariablePath = "/2/users/{id}/likes"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usersLikesCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersLikesCreateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_usersIdLikedTweets: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_usersIdLikedTweets: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_usersIdLikedTweets: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_usersIdLikedTweets: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_usersIdLikedTweets: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_usersIdLikedTweets: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     Returns Tweet objects liked by the provided User ID
     
     - parameter id: (path) The ID of the User to lookup. 
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: Get2UsersIdLikedTweetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdLikedTweets(id: String, maxResults: Int? = nil, paginationToken: String? = nil, tweetFields: [TweetFields_usersIdLikedTweets]? = nil, expansions: [Expansions_usersIdLikedTweets]? = nil, mediaFields: [MediaFields_usersIdLikedTweets]? = nil, pollFields: [PollFields_usersIdLikedTweets]? = nil, userFields: [UserFields_usersIdLikedTweets]? = nil, placeFields: [PlaceFields_usersIdLikedTweets]? = nil) async throws -> Get2UsersIdLikedTweetsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdLikedTweetsWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Returns Tweet objects liked by the provided User ID
     - GET /2/users/{id}/liked_tweets
     - Returns a list of Tweets liked by the provided User ID
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the User to lookup. 
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<Get2UsersIdLikedTweetsResponse> 
     */
    open class func usersIdLikedTweetsWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, tweetFields: [TweetFields_usersIdLikedTweets]? = nil, expansions: [Expansions_usersIdLikedTweets]? = nil, mediaFields: [MediaFields_usersIdLikedTweets]? = nil, pollFields: [PollFields_usersIdLikedTweets]? = nil, userFields: [UserFields_usersIdLikedTweets]? = nil, placeFields: [PlaceFields_usersIdLikedTweets]? = nil) -> RequestBuilder<Get2UsersIdLikedTweetsResponse> {
        var localVariablePath = "/2/users/{id}/liked_tweets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersIdLikedTweetsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_usersIdMentions: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_usersIdMentions: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_usersIdMentions: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_usersIdMentions: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_usersIdMentions: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_usersIdMentions: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     User mention timeline by User ID
     
     - parameter id: (path) The ID of the User to lookup. 
     - parameter sinceId: (query) The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
     - parameter untilId: (query) The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: Get2UsersIdMentionsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdMentions(id: String, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, paginationToken: String? = nil, startTime: Date? = nil, endTime: Date? = nil, tweetFields: [TweetFields_usersIdMentions]? = nil, expansions: [Expansions_usersIdMentions]? = nil, mediaFields: [MediaFields_usersIdMentions]? = nil, pollFields: [PollFields_usersIdMentions]? = nil, userFields: [UserFields_usersIdMentions]? = nil, placeFields: [PlaceFields_usersIdMentions]? = nil) async throws -> Get2UsersIdMentionsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdMentionsWithRequestBuilder(id: id, sinceId: sinceId, untilId: untilId, maxResults: maxResults, paginationToken: paginationToken, startTime: startTime, endTime: endTime, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     User mention timeline by User ID
     - GET /2/users/{id}/mentions
     - Returns Tweet objects that mention username associated to the provided User ID
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the User to lookup. 
     - parameter sinceId: (query) The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
     - parameter untilId: (query) The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<Get2UsersIdMentionsResponse> 
     */
    open class func usersIdMentionsWithRequestBuilder(id: String, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, paginationToken: String? = nil, startTime: Date? = nil, endTime: Date? = nil, tweetFields: [TweetFields_usersIdMentions]? = nil, expansions: [Expansions_usersIdMentions]? = nil, mediaFields: [MediaFields_usersIdMentions]? = nil, pollFields: [PollFields_usersIdMentions]? = nil, userFields: [UserFields_usersIdMentions]? = nil, placeFields: [PlaceFields_usersIdMentions]? = nil) -> RequestBuilder<Get2UsersIdMentionsResponse> {
        var localVariablePath = "/2/users/{id}/mentions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "since_id": sinceId?.encodeToJSON(),
            "until_id": untilId?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersIdMentionsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Causes the User (in the path) to retweet the specified Tweet.
     
     - parameter id: (path) The ID of the authenticated source User that is requesting to retweet the Tweet. 
     - parameter usersRetweetsCreateRequest: (body)  (optional)
     - returns: UsersRetweetsCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdRetweets(id: String, usersRetweetsCreateRequest: UsersRetweetsCreateRequest? = nil) async throws -> UsersRetweetsCreateResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdRetweetsWithRequestBuilder(id: id, usersRetweetsCreateRequest: usersRetweetsCreateRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Causes the User (in the path) to retweet the specified Tweet.
     - POST /2/users/{id}/retweets
     - Causes the User (in the path) to retweet the specified Tweet. The User in the path must match the User context authorizing the request.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User that is requesting to retweet the Tweet. 
     - parameter usersRetweetsCreateRequest: (body)  (optional)
     - returns: RequestBuilder<UsersRetweetsCreateResponse> 
     */
    open class func usersIdRetweetsWithRequestBuilder(id: String, usersRetweetsCreateRequest: UsersRetweetsCreateRequest? = nil) -> RequestBuilder<UsersRetweetsCreateResponse> {
        var localVariablePath = "/2/users/{id}/retweets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usersRetweetsCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersRetweetsCreateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter exclude
     */
    public enum Exclude_usersIdTimeline: String, CaseIterable {
        case replies = "replies"
        case retweets = "retweets"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_usersIdTimeline: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_usersIdTimeline: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_usersIdTimeline: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_usersIdTimeline: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_usersIdTimeline: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_usersIdTimeline: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     User home timeline by User ID
     
     - parameter id: (path) The ID of the authenticated source User to list Reverse Chronological Timeline Tweets of. 
     - parameter sinceId: (query) The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
     - parameter untilId: (query) The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter exclude: (query) The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: Get2UsersIdTimelinesReverseChronologicalResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdTimeline(id: String, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, paginationToken: String? = nil, exclude: [Exclude_usersIdTimeline]? = nil, startTime: Date? = nil, endTime: Date? = nil, tweetFields: [TweetFields_usersIdTimeline]? = nil, expansions: [Expansions_usersIdTimeline]? = nil, mediaFields: [MediaFields_usersIdTimeline]? = nil, pollFields: [PollFields_usersIdTimeline]? = nil, userFields: [UserFields_usersIdTimeline]? = nil, placeFields: [PlaceFields_usersIdTimeline]? = nil) async throws -> Get2UsersIdTimelinesReverseChronologicalResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdTimelineWithRequestBuilder(id: id, sinceId: sinceId, untilId: untilId, maxResults: maxResults, paginationToken: paginationToken, exclude: exclude, startTime: startTime, endTime: endTime, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     User home timeline by User ID
     - GET /2/users/{id}/timelines/reverse_chronological
     - Returns Tweet objects that appears in the provided User ID's home timeline
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User to list Reverse Chronological Timeline Tweets of. 
     - parameter sinceId: (query) The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
     - parameter untilId: (query) The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter exclude: (query) The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<Get2UsersIdTimelinesReverseChronologicalResponse> 
     */
    open class func usersIdTimelineWithRequestBuilder(id: String, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, paginationToken: String? = nil, exclude: [Exclude_usersIdTimeline]? = nil, startTime: Date? = nil, endTime: Date? = nil, tweetFields: [TweetFields_usersIdTimeline]? = nil, expansions: [Expansions_usersIdTimeline]? = nil, mediaFields: [MediaFields_usersIdTimeline]? = nil, pollFields: [PollFields_usersIdTimeline]? = nil, userFields: [UserFields_usersIdTimeline]? = nil, placeFields: [PlaceFields_usersIdTimeline]? = nil) -> RequestBuilder<Get2UsersIdTimelinesReverseChronologicalResponse> {
        var localVariablePath = "/2/users/{id}/timelines/reverse_chronological"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "since_id": sinceId?.encodeToJSON(),
            "until_id": untilId?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "exclude": exclude?.encodeToJSON(),
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersIdTimelinesReverseChronologicalResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter exclude
     */
    public enum Exclude_usersIdTweets: String, CaseIterable {
        case replies = "replies"
        case retweets = "retweets"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_usersIdTweets: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_usersIdTweets: String, CaseIterable {
        case attachmentsPeriodMediaKeys = "attachments.media_keys"
        case attachmentsPeriodPollIds = "attachments.poll_ids"
        case authorId = "author_id"
        case entitiesPeriodMentionsPeriodUsername = "entities.mentions.username"
        case geoPeriodPlaceId = "geo.place_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweetsPeriodId = "referenced_tweets.id"
        case referencedTweetsPeriodIdPeriodAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_usersIdTweets: String, CaseIterable {
        case altText = "alt_text"
        case durationMs = "duration_ms"
        case height = "height"
        case mediaKey = "media_key"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case type = "type"
        case url = "url"
        case variants = "variants"
        case width = "width"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_usersIdTweets: String, CaseIterable {
        case durationMinutes = "duration_minutes"
        case endDatetime = "end_datetime"
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_usersIdTweets: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_usersIdTweets: String, CaseIterable {
        case containedWithin = "contained_within"
        case country = "country"
        case countryCode = "country_code"
        case fullName = "full_name"
        case geo = "geo"
        case id = "id"
        case name = "name"
        case placeType = "place_type"
    }

    /**
     User Tweets timeline by User ID
     
     - parameter id: (path) The ID of the User to lookup. 
     - parameter sinceId: (query) The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
     - parameter untilId: (query) The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter exclude: (query) The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: Get2UsersIdTweetsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdTweets(id: String, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, paginationToken: String? = nil, exclude: [Exclude_usersIdTweets]? = nil, startTime: Date? = nil, endTime: Date? = nil, tweetFields: [TweetFields_usersIdTweets]? = nil, expansions: [Expansions_usersIdTweets]? = nil, mediaFields: [MediaFields_usersIdTweets]? = nil, pollFields: [PollFields_usersIdTweets]? = nil, userFields: [UserFields_usersIdTweets]? = nil, placeFields: [PlaceFields_usersIdTweets]? = nil) async throws -> Get2UsersIdTweetsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdTweetsWithRequestBuilder(id: id, sinceId: sinceId, untilId: untilId, maxResults: maxResults, paginationToken: paginationToken, exclude: exclude, startTime: startTime, endTime: endTime, tweetFields: tweetFields, expansions: expansions, mediaFields: mediaFields, pollFields: pollFields, userFields: userFields, placeFields: placeFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     User Tweets timeline by User ID
     - GET /2/users/{id}/tweets
     - Returns a list of Tweets authored by the provided User ID
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the User to lookup. 
     - parameter sinceId: (query) The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
     - parameter untilId: (query) The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter exclude: (query) The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;). (optional)
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - returns: RequestBuilder<Get2UsersIdTweetsResponse> 
     */
    open class func usersIdTweetsWithRequestBuilder(id: String, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, paginationToken: String? = nil, exclude: [Exclude_usersIdTweets]? = nil, startTime: Date? = nil, endTime: Date? = nil, tweetFields: [TweetFields_usersIdTweets]? = nil, expansions: [Expansions_usersIdTweets]? = nil, mediaFields: [MediaFields_usersIdTweets]? = nil, pollFields: [PollFields_usersIdTweets]? = nil, userFields: [UserFields_usersIdTweets]? = nil, placeFields: [PlaceFields_usersIdTweets]? = nil) -> RequestBuilder<Get2UsersIdTweetsResponse> {
        var localVariablePath = "/2/users/{id}/tweets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "since_id": sinceId?.encodeToJSON(),
            "until_id": untilId?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "exclude": exclude?.encodeToJSON(),
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersIdTweetsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Causes the User (in the path) to unlike the specified Tweet
     
     - parameter id: (path) The ID of the authenticated source User that is requesting to unlike the Tweet. 
     - parameter tweetId: (path) The ID of the Tweet that the User is requesting to unlike. 
     - returns: UsersLikesDeleteResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdUnlike(id: String, tweetId: String) async throws -> UsersLikesDeleteResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdUnlikeWithRequestBuilder(id: id, tweetId: tweetId).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Causes the User (in the path) to unlike the specified Tweet
     - DELETE /2/users/{id}/likes/{tweet_id}
     - Causes the User (in the path) to unlike the specified Tweet. The User must match the User context authorizing the request
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User that is requesting to unlike the Tweet. 
     - parameter tweetId: (path) The ID of the Tweet that the User is requesting to unlike. 
     - returns: RequestBuilder<UsersLikesDeleteResponse> 
     */
    open class func usersIdUnlikeWithRequestBuilder(id: String, tweetId: String) -> RequestBuilder<UsersLikesDeleteResponse> {
        var localVariablePath = "/2/users/{id}/likes/{tweet_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let tweetIdPreEscape = "\(APIHelper.mapValueToPathItem(tweetId))"
        let tweetIdPostEscape = tweetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tweet_id}", with: tweetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersLikesDeleteResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Causes the User (in the path) to unretweet the specified Tweet
     
     - parameter id: (path) The ID of the authenticated source User that is requesting to retweet the Tweet. 
     - parameter sourceTweetId: (path) The ID of the Tweet that the User is requesting to unretweet. 
     - returns: UsersRetweetsDeleteResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdUnretweets(id: String, sourceTweetId: String) async throws -> UsersRetweetsDeleteResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdUnretweetsWithRequestBuilder(id: id, sourceTweetId: sourceTweetId).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Causes the User (in the path) to unretweet the specified Tweet
     - DELETE /2/users/{id}/retweets/{source_tweet_id}
     - Causes the User (in the path) to unretweet the specified Tweet. The User must match the User context authorizing the request
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User that is requesting to retweet the Tweet. 
     - parameter sourceTweetId: (path) The ID of the Tweet that the User is requesting to unretweet. 
     - returns: RequestBuilder<UsersRetweetsDeleteResponse> 
     */
    open class func usersIdUnretweetsWithRequestBuilder(id: String, sourceTweetId: String) -> RequestBuilder<UsersRetweetsDeleteResponse> {
        var localVariablePath = "/2/users/{id}/retweets/{source_tweet_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let sourceTweetIdPreEscape = "\(APIHelper.mapValueToPathItem(sourceTweetId))"
        let sourceTweetIdPostEscape = sourceTweetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{source_tweet_id}", with: sourceTweetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersRetweetsDeleteResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
