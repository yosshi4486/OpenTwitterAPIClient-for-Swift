//
// ListsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ListsAPI {

    /**
     * enum for parameter listFields
     */
    public enum ListFields_getUserListMemberships: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case followerCount = "follower_count"
        case id = "id"
        case memberCount = "member_count"
        case name = "name"
        case ownerId = "owner_id"
        case _private = "private"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_getUserListMemberships: String, CaseIterable {
        case ownerId = "owner_id"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_getUserListMemberships: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     Get a User's List Memberships
     
     - parameter id: (path) The ID of the User to lookup. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: Get2UsersIdListMembershipsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getUserListMemberships(id: String, maxResults: Int? = nil, paginationToken: String? = nil, listFields: [ListFields_getUserListMemberships]? = nil, expansions: [Expansions_getUserListMemberships]? = nil, userFields: [UserFields_getUserListMemberships]? = nil) async throws -> Get2UsersIdListMembershipsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = getUserListMembershipsWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, listFields: listFields, expansions: expansions, userFields: userFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Get a User's List Memberships
     - GET /2/users/{id}/list_memberships
     - Get a User's List Memberships.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the User to lookup. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<Get2UsersIdListMembershipsResponse> 
     */
    open class func getUserListMembershipsWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, listFields: [ListFields_getUserListMemberships]? = nil, expansions: [Expansions_getUserListMemberships]? = nil, userFields: [UserFields_getUserListMemberships]? = nil) -> RequestBuilder<Get2UsersIdListMembershipsResponse> {
        var localVariablePath = "/2/users/{id}/list_memberships"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "list.fields": listFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersIdListMembershipsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Add a List member
     
     - parameter id: (path) The ID of the List for which to add a member. 
     - parameter listAddUserRequest: (body)  (optional)
     - returns: ListMutateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listAddMember(id: String, listAddUserRequest: ListAddUserRequest? = nil) async throws -> ListMutateResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listAddMemberWithRequestBuilder(id: id, listAddUserRequest: listAddUserRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Add a List member
     - POST /2/lists/{id}/members
     - Causes a User to become a member of a List.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List for which to add a member. 
     - parameter listAddUserRequest: (body)  (optional)
     - returns: RequestBuilder<ListMutateResponse> 
     */
    open class func listAddMemberWithRequestBuilder(id: String, listAddUserRequest: ListAddUserRequest? = nil) -> RequestBuilder<ListMutateResponse> {
        var localVariablePath = "/2/lists/{id}/members"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listAddUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListMutateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create List
     
     - parameter listCreateRequest: (body)  (optional)
     - returns: ListCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listIdCreate(listCreateRequest: ListCreateRequest? = nil) async throws -> ListCreateResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listIdCreateWithRequestBuilder(listCreateRequest: listCreateRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Create List
     - POST /2/lists
     - Creates a new List.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter listCreateRequest: (body)  (optional)
     - returns: RequestBuilder<ListCreateResponse> 
     */
    open class func listIdCreateWithRequestBuilder(listCreateRequest: ListCreateRequest? = nil) -> RequestBuilder<ListCreateResponse> {
        let localVariablePath = "/2/lists"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListCreateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete List
     
     - parameter id: (path) The ID of the List to delete. 
     - returns: ListDeleteResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listIdDelete(id: String) async throws -> ListDeleteResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listIdDeleteWithRequestBuilder(id: id).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Delete List
     - DELETE /2/lists/{id}
     - Delete a List that you own.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List to delete. 
     - returns: RequestBuilder<ListDeleteResponse> 
     */
    open class func listIdDeleteWithRequestBuilder(id: String) -> RequestBuilder<ListDeleteResponse> {
        var localVariablePath = "/2/lists/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListDeleteResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter listFields
     */
    public enum ListFields_listIdGet: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case followerCount = "follower_count"
        case id = "id"
        case memberCount = "member_count"
        case name = "name"
        case ownerId = "owner_id"
        case _private = "private"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_listIdGet: String, CaseIterable {
        case ownerId = "owner_id"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_listIdGet: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     List lookup by List ID.
     
     - parameter id: (path) The ID of the List. 
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: Get2ListsIdResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listIdGet(id: String, listFields: [ListFields_listIdGet]? = nil, expansions: [Expansions_listIdGet]? = nil, userFields: [UserFields_listIdGet]? = nil) async throws -> Get2ListsIdResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listIdGetWithRequestBuilder(id: id, listFields: listFields, expansions: expansions, userFields: userFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     List lookup by List ID.
     - GET /2/lists/{id}
     - Returns a List.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List. 
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<Get2ListsIdResponse> 
     */
    open class func listIdGetWithRequestBuilder(id: String, listFields: [ListFields_listIdGet]? = nil, expansions: [Expansions_listIdGet]? = nil, userFields: [UserFields_listIdGet]? = nil) -> RequestBuilder<Get2ListsIdResponse> {
        var localVariablePath = "/2/lists/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "list.fields": listFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2ListsIdResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update List.
     
     - parameter id: (path) The ID of the List to modify. 
     - parameter listUpdateRequest: (body)  (optional)
     - returns: ListUpdateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listIdUpdate(id: String, listUpdateRequest: ListUpdateRequest? = nil) async throws -> ListUpdateResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listIdUpdateWithRequestBuilder(id: id, listUpdateRequest: listUpdateRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Update List.
     - PUT /2/lists/{id}
     - Update a List that you own.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List to modify. 
     - parameter listUpdateRequest: (body)  (optional)
     - returns: RequestBuilder<ListUpdateResponse> 
     */
    open class func listIdUpdateWithRequestBuilder(id: String, listUpdateRequest: ListUpdateRequest? = nil) -> RequestBuilder<ListUpdateResponse> {
        var localVariablePath = "/2/lists/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListUpdateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Remove a List member
     
     - parameter id: (path) The ID of the List to remove a member. 
     - parameter userId: (path) The ID of User that will be removed from the List. 
     - returns: ListMutateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listRemoveMember(id: String, userId: String) async throws -> ListMutateResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listRemoveMemberWithRequestBuilder(id: id, userId: userId).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Remove a List member
     - DELETE /2/lists/{id}/members/{user_id}
     - Causes a User to be removed from the members of a List.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List to remove a member. 
     - parameter userId: (path) The ID of User that will be removed from the List. 
     - returns: RequestBuilder<ListMutateResponse> 
     */
    open class func listRemoveMemberWithRequestBuilder(id: String, userId: String) -> RequestBuilder<ListMutateResponse> {
        var localVariablePath = "/2/lists/{id}/members/{user_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListMutateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Follow a List
     
     - parameter id: (path) The ID of the authenticated source User that will follow the List. 
     - parameter listFollowedRequest: (body)  (optional)
     - returns: ListFollowedResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listUserFollow(id: String, listFollowedRequest: ListFollowedRequest? = nil) async throws -> ListFollowedResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listUserFollowWithRequestBuilder(id: id, listFollowedRequest: listFollowedRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Follow a List
     - POST /2/users/{id}/followed_lists
     - Causes a User to follow a List.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User that will follow the List. 
     - parameter listFollowedRequest: (body)  (optional)
     - returns: RequestBuilder<ListFollowedResponse> 
     */
    open class func listUserFollowWithRequestBuilder(id: String, listFollowedRequest: ListFollowedRequest? = nil) -> RequestBuilder<ListFollowedResponse> {
        var localVariablePath = "/2/users/{id}/followed_lists"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listFollowedRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListFollowedResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter listFields
     */
    public enum ListFields_listUserOwnedLists: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case followerCount = "follower_count"
        case id = "id"
        case memberCount = "member_count"
        case name = "name"
        case ownerId = "owner_id"
        case _private = "private"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_listUserOwnedLists: String, CaseIterable {
        case ownerId = "owner_id"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_listUserOwnedLists: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     Get a User's Owned Lists.
     
     - parameter id: (path) The ID of the User to lookup. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: Get2UsersIdOwnedListsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listUserOwnedLists(id: String, maxResults: Int? = nil, paginationToken: String? = nil, listFields: [ListFields_listUserOwnedLists]? = nil, expansions: [Expansions_listUserOwnedLists]? = nil, userFields: [UserFields_listUserOwnedLists]? = nil) async throws -> Get2UsersIdOwnedListsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listUserOwnedListsWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, listFields: listFields, expansions: expansions, userFields: userFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Get a User's Owned Lists.
     - GET /2/users/{id}/owned_lists
     - Get a User's Owned Lists.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the User to lookup. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<Get2UsersIdOwnedListsResponse> 
     */
    open class func listUserOwnedListsWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, listFields: [ListFields_listUserOwnedLists]? = nil, expansions: [Expansions_listUserOwnedLists]? = nil, userFields: [UserFields_listUserOwnedLists]? = nil) -> RequestBuilder<Get2UsersIdOwnedListsResponse> {
        var localVariablePath = "/2/users/{id}/owned_lists"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "list.fields": listFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersIdOwnedListsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Pin a List
     
     - parameter id: (path) The ID of the authenticated source User that will pin the List. 
     - parameter listPinnedRequest: (body)  
     - returns: ListPinnedResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listUserPin(id: String, listPinnedRequest: ListPinnedRequest) async throws -> ListPinnedResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listUserPinWithRequestBuilder(id: id, listPinnedRequest: listPinnedRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Pin a List
     - POST /2/users/{id}/pinned_lists
     - Causes a User to pin a List.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User that will pin the List. 
     - parameter listPinnedRequest: (body)  
     - returns: RequestBuilder<ListPinnedResponse> 
     */
    open class func listUserPinWithRequestBuilder(id: String, listPinnedRequest: ListPinnedRequest) -> RequestBuilder<ListPinnedResponse> {
        var localVariablePath = "/2/users/{id}/pinned_lists"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listPinnedRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListPinnedResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter listFields
     */
    public enum ListFields_listUserPinnedLists: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case followerCount = "follower_count"
        case id = "id"
        case memberCount = "member_count"
        case name = "name"
        case ownerId = "owner_id"
        case _private = "private"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_listUserPinnedLists: String, CaseIterable {
        case ownerId = "owner_id"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_listUserPinnedLists: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     Get a User's Pinned Lists
     
     - parameter id: (path) The ID of the authenticated source User for whom to return results. 
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: Get2UsersIdPinnedListsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listUserPinnedLists(id: String, listFields: [ListFields_listUserPinnedLists]? = nil, expansions: [Expansions_listUserPinnedLists]? = nil, userFields: [UserFields_listUserPinnedLists]? = nil) async throws -> Get2UsersIdPinnedListsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listUserPinnedListsWithRequestBuilder(id: id, listFields: listFields, expansions: expansions, userFields: userFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Get a User's Pinned Lists
     - GET /2/users/{id}/pinned_lists
     - Get a User's Pinned Lists.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User for whom to return results. 
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<Get2UsersIdPinnedListsResponse> 
     */
    open class func listUserPinnedListsWithRequestBuilder(id: String, listFields: [ListFields_listUserPinnedLists]? = nil, expansions: [Expansions_listUserPinnedLists]? = nil, userFields: [UserFields_listUserPinnedLists]? = nil) -> RequestBuilder<Get2UsersIdPinnedListsResponse> {
        var localVariablePath = "/2/users/{id}/pinned_lists"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "list.fields": listFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersIdPinnedListsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unfollow a List
     
     - parameter id: (path) The ID of the authenticated source User that will unfollow the List. 
     - parameter listId: (path) The ID of the List to unfollow. 
     - returns: ListFollowedResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listUserUnfollow(id: String, listId: String) async throws -> ListFollowedResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listUserUnfollowWithRequestBuilder(id: id, listId: listId).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Unfollow a List
     - DELETE /2/users/{id}/followed_lists/{list_id}
     - Causes a User to unfollow a List.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User that will unfollow the List. 
     - parameter listId: (path) The ID of the List to unfollow. 
     - returns: RequestBuilder<ListFollowedResponse> 
     */
    open class func listUserUnfollowWithRequestBuilder(id: String, listId: String) -> RequestBuilder<ListFollowedResponse> {
        var localVariablePath = "/2/users/{id}/followed_lists/{list_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListFollowedResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unpin a List
     
     - parameter id: (path) The ID of the authenticated source User for whom to return results. 
     - parameter listId: (path) The ID of the List to unpin. 
     - returns: ListUnpinResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listUserUnpin(id: String, listId: String) async throws -> ListUnpinResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listUserUnpinWithRequestBuilder(id: id, listId: listId).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Unpin a List
     - DELETE /2/users/{id}/pinned_lists/{list_id}
     - Causes a User to remove a pinned List.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User for whom to return results. 
     - parameter listId: (path) The ID of the List to unpin. 
     - returns: RequestBuilder<ListUnpinResponse> 
     */
    open class func listUserUnpinWithRequestBuilder(id: String, listId: String) -> RequestBuilder<ListUnpinResponse> {
        var localVariablePath = "/2/users/{id}/pinned_lists/{list_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListUnpinResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter listFields
     */
    public enum ListFields_userFollowedLists: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case followerCount = "follower_count"
        case id = "id"
        case memberCount = "member_count"
        case name = "name"
        case ownerId = "owner_id"
        case _private = "private"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_userFollowedLists: String, CaseIterable {
        case ownerId = "owner_id"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_userFollowedLists: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     Get User's Followed Lists
     
     - parameter id: (path) The ID of the User to lookup. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: Get2UsersIdFollowedListsResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func userFollowedLists(id: String, maxResults: Int? = nil, paginationToken: String? = nil, listFields: [ListFields_userFollowedLists]? = nil, expansions: [Expansions_userFollowedLists]? = nil, userFields: [UserFields_userFollowedLists]? = nil) async throws -> Get2UsersIdFollowedListsResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = userFollowedListsWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, listFields: listFields, expansions: expansions, userFields: userFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Get User's Followed Lists
     - GET /2/users/{id}/followed_lists
     - Returns a User's followed Lists.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the User to lookup. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<Get2UsersIdFollowedListsResponse> 
     */
    open class func userFollowedListsWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, listFields: [ListFields_userFollowedLists]? = nil, expansions: [Expansions_userFollowedLists]? = nil, userFields: [UserFields_userFollowedLists]? = nil) -> RequestBuilder<Get2UsersIdFollowedListsResponse> {
        var localVariablePath = "/2/users/{id}/followed_lists"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "list.fields": listFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersIdFollowedListsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
