//
// VideoAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VideoAllOf: Codable, JSONEncodable {

    public var durationMs: Int?
    public var nonPublicMetrics: VideoAllOfNonPublicMetrics?
    public var organicMetrics: VideoAllOfOrganicMetrics?
    public var previewImageUrl: String?
    public var promotedMetrics: VideoAllOfPromotedMetrics?
    public var publicMetrics: VideoAllOfPublicMetrics?
    /** An array of all available variants of the media. */
    public var variants: [Variant]?

    public init(durationMs: Int? = nil, nonPublicMetrics: VideoAllOfNonPublicMetrics? = nil, organicMetrics: VideoAllOfOrganicMetrics? = nil, previewImageUrl: String? = nil, promotedMetrics: VideoAllOfPromotedMetrics? = nil, publicMetrics: VideoAllOfPublicMetrics? = nil, variants: [Variant]? = nil) {
        self.durationMs = durationMs
        self.nonPublicMetrics = nonPublicMetrics
        self.organicMetrics = organicMetrics
        self.previewImageUrl = previewImageUrl
        self.promotedMetrics = promotedMetrics
        self.publicMetrics = publicMetrics
        self.variants = variants
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case durationMs = "duration_ms"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case previewImageUrl = "preview_image_url"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case variants
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(durationMs, forKey: .durationMs)
        try container.encodeIfPresent(nonPublicMetrics, forKey: .nonPublicMetrics)
        try container.encodeIfPresent(organicMetrics, forKey: .organicMetrics)
        try container.encodeIfPresent(previewImageUrl, forKey: .previewImageUrl)
        try container.encodeIfPresent(promotedMetrics, forKey: .promotedMetrics)
        try container.encodeIfPresent(publicMetrics, forKey: .publicMetrics)
        try container.encodeIfPresent(variants, forKey: .variants)
    }
}

