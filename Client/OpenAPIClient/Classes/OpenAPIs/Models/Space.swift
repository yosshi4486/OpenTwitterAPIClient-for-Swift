//
// Space.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct Space: Codable, JSONEncodable {

    public enum State: String, Codable, CaseIterable {
        case live = "live"
        case scheduled = "scheduled"
        case ended = "ended"
    }
    /** Creation time of the Space. */
    public var createdAt: Date?
    /** Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. */
    public var creatorId: String?
    /** End time of the Space. */
    public var endedAt: Date?
    /** The user ids for the hosts of the Space. */
    public var hostIds: [String]?
    /** The unique identifier of this Space. */
    public var id: String
    /** An array of user ids for people who were invited to a Space. */
    public var invitedUserIds: [String]?
    /** Denotes if the Space is a ticketed Space. */
    public var isTicketed: Bool?
    /** The language of the Space. */
    public var lang: String?
    /** The number of participants in a Space. */
    public var participantCount: Int?
    /** A date time stamp for when a Space is scheduled to begin. */
    public var scheduledStart: Date?
    /** An array of user ids for people who were speakers in a Space. */
    public var speakerIds: [String]?
    /** When the Space was started as a date string. */
    public var startedAt: Date?
    /** The current state of the Space. */
    public var state: State
    /** The number of people who have either purchased a ticket or set a reminder for this Space. */
    public var subscriberCount: Int?
    /** The title of the Space. */
    public var title: String?
    /** The topics of a Space, as selected by its creator. */
    public var topics: [SpaceTopicsInner]?
    /** When the Space was last updated. */
    public var updatedAt: Date?

    public init(createdAt: Date? = nil, creatorId: String? = nil, endedAt: Date? = nil, hostIds: [String]? = nil, id: String, invitedUserIds: [String]? = nil, isTicketed: Bool? = nil, lang: String? = nil, participantCount: Int? = nil, scheduledStart: Date? = nil, speakerIds: [String]? = nil, startedAt: Date? = nil, state: State, subscriberCount: Int? = nil, title: String? = nil, topics: [SpaceTopicsInner]? = nil, updatedAt: Date? = nil) {
        self.createdAt = createdAt
        self.creatorId = creatorId
        self.endedAt = endedAt
        self.hostIds = hostIds
        self.id = id
        self.invitedUserIds = invitedUserIds
        self.isTicketed = isTicketed
        self.lang = lang
        self.participantCount = participantCount
        self.scheduledStart = scheduledStart
        self.speakerIds = speakerIds
        self.startedAt = startedAt
        self.state = state
        self.subscriberCount = subscriberCount
        self.title = title
        self.topics = topics
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "created_at"
        case creatorId = "creator_id"
        case endedAt = "ended_at"
        case hostIds = "host_ids"
        case id
        case invitedUserIds = "invited_user_ids"
        case isTicketed = "is_ticketed"
        case lang
        case participantCount = "participant_count"
        case scheduledStart = "scheduled_start"
        case speakerIds = "speaker_ids"
        case startedAt = "started_at"
        case state
        case subscriberCount = "subscriber_count"
        case title
        case topics
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(creatorId, forKey: .creatorId)
        try container.encodeIfPresent(endedAt, forKey: .endedAt)
        try container.encodeIfPresent(hostIds, forKey: .hostIds)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(invitedUserIds, forKey: .invitedUserIds)
        try container.encodeIfPresent(isTicketed, forKey: .isTicketed)
        try container.encodeIfPresent(lang, forKey: .lang)
        try container.encodeIfPresent(participantCount, forKey: .participantCount)
        try container.encodeIfPresent(scheduledStart, forKey: .scheduledStart)
        try container.encodeIfPresent(speakerIds, forKey: .speakerIds)
        try container.encodeIfPresent(startedAt, forKey: .startedAt)
        try container.encode(state, forKey: .state)
        try container.encodeIfPresent(subscriberCount, forKey: .subscriberCount)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(topics, forKey: .topics)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

