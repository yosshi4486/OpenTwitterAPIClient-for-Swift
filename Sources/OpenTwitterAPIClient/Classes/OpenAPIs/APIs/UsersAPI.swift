//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UsersAPI {

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findMyUser: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findMyUser: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findMyUser: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     User lookup me
     
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2UsersMeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findMyUser(userFields: [UserFields_findMyUser]? = nil, expansions: [Expansions_findMyUser]? = nil, tweetFields: [TweetFields_findMyUser]? = nil) async throws -> Get2UsersMeResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = findMyUserWithRequestBuilder(userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     User lookup me
     - GET /2/users/me
     - This endpoint returns information about the requesting User.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2UsersMeResponse> 
     */
    open class func findMyUserWithRequestBuilder(userFields: [UserFields_findMyUser]? = nil, expansions: [Expansions_findMyUser]? = nil, tweetFields: [TweetFields_findMyUser]? = nil) -> RequestBuilder<Get2UsersMeResponse> {
        let localVariablePath = "/2/users/me"
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersMeResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findUserById: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findUserById: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findUserById: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     User lookup by ID
     
     - parameter id: (path) The ID of the User to lookup. 
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2UsersIdResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findUserById(id: String, userFields: [UserFields_findUserById]? = nil, expansions: [Expansions_findUserById]? = nil, tweetFields: [TweetFields_findUserById]? = nil) async throws -> Get2UsersIdResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = findUserByIdWithRequestBuilder(id: id, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     User lookup by ID
     - GET /2/users/{id}
     - This endpoint returns information about a User. Specify User by ID.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the User to lookup. 
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2UsersIdResponse> 
     */
    open class func findUserByIdWithRequestBuilder(id: String, userFields: [UserFields_findUserById]? = nil, expansions: [Expansions_findUserById]? = nil, tweetFields: [TweetFields_findUserById]? = nil) -> RequestBuilder<Get2UsersIdResponse> {
        var localVariablePath = "/2/users/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersIdResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findUserByUsername: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findUserByUsername: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findUserByUsername: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     User lookup by username
     
     - parameter username: (path) A username. 
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2UsersByUsernameUsernameResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findUserByUsername(username: String, userFields: [UserFields_findUserByUsername]? = nil, expansions: [Expansions_findUserByUsername]? = nil, tweetFields: [TweetFields_findUserByUsername]? = nil) async throws -> Get2UsersByUsernameUsernameResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = findUserByUsernameWithRequestBuilder(username: username, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     User lookup by username
     - GET /2/users/by/username/{username}
     - This endpoint returns information about a User. Specify User by username.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter username: (path) A username. 
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2UsersByUsernameUsernameResponse> 
     */
    open class func findUserByUsernameWithRequestBuilder(username: String, userFields: [UserFields_findUserByUsername]? = nil, expansions: [Expansions_findUserByUsername]? = nil, tweetFields: [TweetFields_findUserByUsername]? = nil) -> RequestBuilder<Get2UsersByUsernameUsernameResponse> {
        var localVariablePath = "/2/users/by/username/{username}"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersByUsernameUsernameResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findUsersById: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findUsersById: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findUsersById: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     User lookup by IDs
     
     - parameter ids: (query) A list of User IDs, comma-separated. You can specify up to 100 IDs. 
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2UsersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findUsersById(ids: [String], userFields: [UserFields_findUsersById]? = nil, expansions: [Expansions_findUsersById]? = nil, tweetFields: [TweetFields_findUsersById]? = nil) async throws -> Get2UsersResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = findUsersByIdWithRequestBuilder(ids: ids, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     User lookup by IDs
     - GET /2/users
     - This endpoint returns information about Users. Specify Users by their ID.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter ids: (query) A list of User IDs, comma-separated. You can specify up to 100 IDs. 
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2UsersResponse> 
     */
    open class func findUsersByIdWithRequestBuilder(ids: [String], userFields: [UserFields_findUsersById]? = nil, expansions: [Expansions_findUsersById]? = nil, tweetFields: [TweetFields_findUsersById]? = nil) -> RequestBuilder<Get2UsersResponse> {
        let localVariablePath = "/2/users"
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": ids.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findUsersByUsername: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findUsersByUsername: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findUsersByUsername: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     User lookup by usernames
     
     - parameter usernames: (query) A list of usernames, comma-separated. 
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2UsersByResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func findUsersByUsername(usernames: [String], userFields: [UserFields_findUsersByUsername]? = nil, expansions: [Expansions_findUsersByUsername]? = nil, tweetFields: [TweetFields_findUsersByUsername]? = nil) async throws -> Get2UsersByResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = findUsersByUsernameWithRequestBuilder(usernames: usernames, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     User lookup by usernames
     - GET /2/users/by
     - This endpoint returns information about Users. Specify Users by their username.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter usernames: (query) A list of usernames, comma-separated. 
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2UsersByResponse> 
     */
    open class func findUsersByUsernameWithRequestBuilder(usernames: [String], userFields: [UserFields_findUsersByUsername]? = nil, expansions: [Expansions_findUsersByUsername]? = nil, tweetFields: [TweetFields_findUsersByUsername]? = nil) -> RequestBuilder<Get2UsersByResponse> {
        let localVariablePath = "/2/users/by"
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "usernames": usernames.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersByResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_listGetFollowers: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_listGetFollowers: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_listGetFollowers: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     Returns User objects that follow a List by the provided List ID
     
     - parameter id: (path) The ID of the List. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2ListsIdFollowersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listGetFollowers(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_listGetFollowers]? = nil, expansions: [Expansions_listGetFollowers]? = nil, tweetFields: [TweetFields_listGetFollowers]? = nil) async throws -> Get2ListsIdFollowersResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listGetFollowersWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Returns User objects that follow a List by the provided List ID
     - GET /2/lists/{id}/followers
     - Returns a list of Users that follow a List by the provided List ID
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2ListsIdFollowersResponse> 
     */
    open class func listGetFollowersWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_listGetFollowers]? = nil, expansions: [Expansions_listGetFollowers]? = nil, tweetFields: [TweetFields_listGetFollowers]? = nil) -> RequestBuilder<Get2ListsIdFollowersResponse> {
        var localVariablePath = "/2/lists/{id}/followers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2ListsIdFollowersResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_listGetMembers: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_listGetMembers: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_listGetMembers: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     Returns User objects that are members of a List by the provided List ID.
     
     - parameter id: (path) The ID of the List. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2ListsIdMembersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func listGetMembers(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_listGetMembers]? = nil, expansions: [Expansions_listGetMembers]? = nil, tweetFields: [TweetFields_listGetMembers]? = nil) async throws -> Get2ListsIdMembersResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = listGetMembersWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Returns User objects that are members of a List by the provided List ID.
     - GET /2/lists/{id}/members
     - Returns a list of Users that are members of a List by the provided List ID.
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2ListsIdMembersResponse> 
     */
    open class func listGetMembersWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_listGetMembers]? = nil, expansions: [Expansions_listGetMembers]? = nil, tweetFields: [TweetFields_listGetMembers]? = nil) -> RequestBuilder<Get2ListsIdMembersResponse> {
        var localVariablePath = "/2/lists/{id}/members"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2ListsIdMembersResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_tweetsIdLikingUsers: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_tweetsIdLikingUsers: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_tweetsIdLikingUsers: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     Returns User objects that have liked the provided Tweet ID
     
     - parameter id: (path) A single Tweet ID. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2TweetsIdLikingUsersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tweetsIdLikingUsers(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_tweetsIdLikingUsers]? = nil, expansions: [Expansions_tweetsIdLikingUsers]? = nil, tweetFields: [TweetFields_tweetsIdLikingUsers]? = nil) async throws -> Get2TweetsIdLikingUsersResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = tweetsIdLikingUsersWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Returns User objects that have liked the provided Tweet ID
     - GET /2/tweets/{id}/liking_users
     - Returns a list of Users that have liked the provided Tweet ID
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) A single Tweet ID. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2TweetsIdLikingUsersResponse> 
     */
    open class func tweetsIdLikingUsersWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_tweetsIdLikingUsers]? = nil, expansions: [Expansions_tweetsIdLikingUsers]? = nil, tweetFields: [TweetFields_tweetsIdLikingUsers]? = nil) -> RequestBuilder<Get2TweetsIdLikingUsersResponse> {
        var localVariablePath = "/2/tweets/{id}/liking_users"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2TweetsIdLikingUsersResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_tweetsIdRetweetingUsers: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_tweetsIdRetweetingUsers: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_tweetsIdRetweetingUsers: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     Returns User objects that have retweeted the provided Tweet ID
     
     - parameter id: (path) A single Tweet ID. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2TweetsIdRetweetedByResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tweetsIdRetweetingUsers(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_tweetsIdRetweetingUsers]? = nil, expansions: [Expansions_tweetsIdRetweetingUsers]? = nil, tweetFields: [TweetFields_tweetsIdRetweetingUsers]? = nil) async throws -> Get2TweetsIdRetweetedByResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = tweetsIdRetweetingUsersWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Returns User objects that have retweeted the provided Tweet ID
     - GET /2/tweets/{id}/retweeted_by
     - Returns a list of Users that have retweeted the provided Tweet ID
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) A single Tweet ID. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2TweetsIdRetweetedByResponse> 
     */
    open class func tweetsIdRetweetingUsersWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_tweetsIdRetweetingUsers]? = nil, expansions: [Expansions_tweetsIdRetweetingUsers]? = nil, tweetFields: [TweetFields_tweetsIdRetweetingUsers]? = nil) -> RequestBuilder<Get2TweetsIdRetweetedByResponse> {
        var localVariablePath = "/2/tweets/{id}/retweeted_by"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2TweetsIdRetweetedByResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Block User by User ID
     
     - parameter id: (path) The ID of the authenticated source User that is requesting to block the target User. 
     - parameter blockUserRequest: (body)  
     - returns: BlockUserMutationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdBlock(id: String, blockUserRequest: BlockUserRequest) async throws -> BlockUserMutationResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdBlockWithRequestBuilder(id: id, blockUserRequest: blockUserRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Block User by User ID
     - POST /2/users/{id}/blocking
     - Causes the User (in the path) to block the target User. The User (in the path) must match the User context authorizing the request
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User that is requesting to block the target User. 
     - parameter blockUserRequest: (body)  
     - returns: RequestBuilder<BlockUserMutationResponse> 
     */
    open class func usersIdBlockWithRequestBuilder(id: String, blockUserRequest: BlockUserRequest) -> RequestBuilder<BlockUserMutationResponse> {
        var localVariablePath = "/2/users/{id}/blocking"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: blockUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlockUserMutationResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_usersIdBlocking: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_usersIdBlocking: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_usersIdBlocking: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     Returns User objects that are blocked by provided User ID
     
     - parameter id: (path) The ID of the authenticated source User for whom to return results. 
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2UsersIdBlockingResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdBlocking(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_usersIdBlocking]? = nil, expansions: [Expansions_usersIdBlocking]? = nil, tweetFields: [TweetFields_usersIdBlocking]? = nil) async throws -> Get2UsersIdBlockingResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdBlockingWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Returns User objects that are blocked by provided User ID
     - GET /2/users/{id}/blocking
     - Returns a list of Users that are blocked by the provided User ID
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User for whom to return results. 
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2UsersIdBlockingResponse> 
     */
    open class func usersIdBlockingWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_usersIdBlocking]? = nil, expansions: [Expansions_usersIdBlocking]? = nil, tweetFields: [TweetFields_usersIdBlocking]? = nil) -> RequestBuilder<Get2UsersIdBlockingResponse> {
        var localVariablePath = "/2/users/{id}/blocking"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersIdBlockingResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Follow User
     
     - parameter id: (path) The ID of the authenticated source User that is requesting to follow the target User. 
     - parameter usersFollowingCreateRequest: (body)  (optional)
     - returns: UsersFollowingCreateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdFollow(id: String, usersFollowingCreateRequest: UsersFollowingCreateRequest? = nil) async throws -> UsersFollowingCreateResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdFollowWithRequestBuilder(id: id, usersFollowingCreateRequest: usersFollowingCreateRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Follow User
     - POST /2/users/{id}/following
     - Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User that is requesting to follow the target User. 
     - parameter usersFollowingCreateRequest: (body)  (optional)
     - returns: RequestBuilder<UsersFollowingCreateResponse> 
     */
    open class func usersIdFollowWithRequestBuilder(id: String, usersFollowingCreateRequest: UsersFollowingCreateRequest? = nil) -> RequestBuilder<UsersFollowingCreateResponse> {
        var localVariablePath = "/2/users/{id}/following"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usersFollowingCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersFollowingCreateResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_usersIdFollowers: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_usersIdFollowers: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_usersIdFollowers: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     Returns User objects that follow a List by the provided User ID
     
     - parameter id: (path) The ID of the User to lookup. 
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2UsersIdFollowersResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdFollowers(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_usersIdFollowers]? = nil, expansions: [Expansions_usersIdFollowers]? = nil, tweetFields: [TweetFields_usersIdFollowers]? = nil) async throws -> Get2UsersIdFollowersResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdFollowersWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Returns User objects that follow a List by the provided User ID
     - GET /2/users/{id}/followers
     - Returns a list of Users that follow the provided User ID
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the User to lookup. 
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2UsersIdFollowersResponse> 
     */
    open class func usersIdFollowersWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_usersIdFollowers]? = nil, expansions: [Expansions_usersIdFollowers]? = nil, tweetFields: [TweetFields_usersIdFollowers]? = nil) -> RequestBuilder<Get2UsersIdFollowersResponse> {
        var localVariablePath = "/2/users/{id}/followers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersIdFollowersResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_usersIdFollowing: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_usersIdFollowing: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_usersIdFollowing: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     Following by User ID
     
     - parameter id: (path) The ID of the User to lookup. 
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2UsersIdFollowingResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdFollowing(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_usersIdFollowing]? = nil, expansions: [Expansions_usersIdFollowing]? = nil, tweetFields: [TweetFields_usersIdFollowing]? = nil) async throws -> Get2UsersIdFollowingResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdFollowingWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Following by User ID
     - GET /2/users/{id}/following
     - Returns a list of Users that are being followed by the provided User ID
     - BASIC:
       - type: http
       - name: BearerToken
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the User to lookup. 
     - parameter maxResults: (query) The maximum number of results. (optional)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2UsersIdFollowingResponse> 
     */
    open class func usersIdFollowingWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_usersIdFollowing]? = nil, expansions: [Expansions_usersIdFollowing]? = nil, tweetFields: [TweetFields_usersIdFollowing]? = nil) -> RequestBuilder<Get2UsersIdFollowingResponse> {
        var localVariablePath = "/2/users/{id}/following"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersIdFollowingResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Mute User by User ID.
     
     - parameter id: (path) The ID of the authenticated source User that is requesting to mute the target User. 
     - parameter muteUserRequest: (body)  (optional)
     - returns: MuteUserMutationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdMute(id: String, muteUserRequest: MuteUserRequest? = nil) async throws -> MuteUserMutationResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdMuteWithRequestBuilder(id: id, muteUserRequest: muteUserRequest).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Mute User by User ID.
     - POST /2/users/{id}/muting
     - Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User that is requesting to mute the target User. 
     - parameter muteUserRequest: (body)  (optional)
     - returns: RequestBuilder<MuteUserMutationResponse> 
     */
    open class func usersIdMuteWithRequestBuilder(id: String, muteUserRequest: MuteUserRequest? = nil) -> RequestBuilder<MuteUserMutationResponse> {
        var localVariablePath = "/2/users/{id}/muting"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: muteUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MuteUserMutationResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_usersIdMuting: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case entities = "entities"
        case id = "id"
        case location = "location"
        case name = "name"
        case pinnedTweetId = "pinned_tweet_id"
        case profileImageUrl = "profile_image_url"
        case protected = "protected"
        case publicMetrics = "public_metrics"
        case url = "url"
        case username = "username"
        case verified = "verified"
        case withheld = "withheld"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_usersIdMuting: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_usersIdMuting: String, CaseIterable {
        case attachments = "attachments"
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities = "entities"
        case geo = "geo"
        case id = "id"
        case inReplyToUserId = "in_reply_to_user_id"
        case lang = "lang"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source = "source"
        case text = "text"
        case withheld = "withheld"
    }

    /**
     Returns User objects that are muted by the provided User ID
     
     - parameter id: (path) The ID of the authenticated source User for whom to return results. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: Get2UsersIdMutingResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdMuting(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_usersIdMuting]? = nil, expansions: [Expansions_usersIdMuting]? = nil, tweetFields: [TweetFields_usersIdMuting]? = nil) async throws -> Get2UsersIdMutingResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdMutingWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, userFields: userFields, expansions: expansions, tweetFields: tweetFields).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Returns User objects that are muted by the provided User ID
     - GET /2/users/{id}/muting
     - Returns a list of Users that are muted by the provided User ID
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source User for whom to return results. 
     - parameter maxResults: (query) The maximum number of results. (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - returns: RequestBuilder<Get2UsersIdMutingResponse> 
     */
    open class func usersIdMutingWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, userFields: [UserFields_usersIdMuting]? = nil, expansions: [Expansions_usersIdMuting]? = nil, tweetFields: [TweetFields_usersIdMuting]? = nil) -> RequestBuilder<Get2UsersIdMutingResponse> {
        var localVariablePath = "/2/users/{id}/muting"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Get2UsersIdMutingResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unblock User by User ID
     
     - parameter sourceUserId: (path) The ID of the authenticated source User that is requesting to unblock the target User. 
     - parameter targetUserId: (path) The ID of the User that the source User is requesting to unblock. 
     - returns: BlockUserMutationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdUnblock(sourceUserId: String, targetUserId: String) async throws -> BlockUserMutationResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdUnblockWithRequestBuilder(sourceUserId: sourceUserId, targetUserId: targetUserId).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Unblock User by User ID
     - DELETE /2/users/{source_user_id}/blocking/{target_user_id}
     - Causes the source User to unblock the target User. The source User must match the User context authorizing the request
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter sourceUserId: (path) The ID of the authenticated source User that is requesting to unblock the target User. 
     - parameter targetUserId: (path) The ID of the User that the source User is requesting to unblock. 
     - returns: RequestBuilder<BlockUserMutationResponse> 
     */
    open class func usersIdUnblockWithRequestBuilder(sourceUserId: String, targetUserId: String) -> RequestBuilder<BlockUserMutationResponse> {
        var localVariablePath = "/2/users/{source_user_id}/blocking/{target_user_id}"
        let sourceUserIdPreEscape = "\(APIHelper.mapValueToPathItem(sourceUserId))"
        let sourceUserIdPostEscape = sourceUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{source_user_id}", with: sourceUserIdPostEscape, options: .literal, range: nil)
        let targetUserIdPreEscape = "\(APIHelper.mapValueToPathItem(targetUserId))"
        let targetUserIdPostEscape = targetUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{target_user_id}", with: targetUserIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BlockUserMutationResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unfollow User
     
     - parameter sourceUserId: (path) The ID of the authenticated source User that is requesting to unfollow the target User. 
     - parameter targetUserId: (path) The ID of the User that the source User is requesting to unfollow. 
     - returns: UsersFollowingDeleteResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdUnfollow(sourceUserId: String, targetUserId: String) async throws -> UsersFollowingDeleteResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdUnfollowWithRequestBuilder(sourceUserId: sourceUserId, targetUserId: targetUserId).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Unfollow User
     - DELETE /2/users/{source_user_id}/following/{target_user_id}
     - Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter sourceUserId: (path) The ID of the authenticated source User that is requesting to unfollow the target User. 
     - parameter targetUserId: (path) The ID of the User that the source User is requesting to unfollow. 
     - returns: RequestBuilder<UsersFollowingDeleteResponse> 
     */
    open class func usersIdUnfollowWithRequestBuilder(sourceUserId: String, targetUserId: String) -> RequestBuilder<UsersFollowingDeleteResponse> {
        var localVariablePath = "/2/users/{source_user_id}/following/{target_user_id}"
        let sourceUserIdPreEscape = "\(APIHelper.mapValueToPathItem(sourceUserId))"
        let sourceUserIdPostEscape = sourceUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{source_user_id}", with: sourceUserIdPostEscape, options: .literal, range: nil)
        let targetUserIdPreEscape = "\(APIHelper.mapValueToPathItem(targetUserId))"
        let targetUserIdPostEscape = targetUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{target_user_id}", with: targetUserIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersFollowingDeleteResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unmute User by User ID
     
     - parameter sourceUserId: (path) The ID of the authenticated source User that is requesting to unmute the target User. 
     - parameter targetUserId: (path) The ID of the User that the source User is requesting to unmute. 
     - returns: MuteUserMutationResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersIdUnmute(sourceUserId: String, targetUserId: String) async throws -> MuteUserMutationResponse {
        var requestTask: RequestTask?
        return try await withTaskCancellationHandler {
            try Task.checkCancellation()
            return try await withCheckedThrowingContinuation { continuation in
                guard !Task.isCancelled else {
                  continuation.resume(throwing: CancellationError())
                  return
                }

                requestTask = usersIdUnmuteWithRequestBuilder(sourceUserId: sourceUserId, targetUserId: targetUserId).execute { result in
                    switch result {
                    case let .success(response):
                        continuation.resume(returning: response.body)
                    case let .failure(error):
                        continuation.resume(throwing: error)
                    }
                }
            }
        } onCancel: { [requestTask] in
            requestTask?.cancel()
        }
    }

    /**
     Unmute User by User ID
     - DELETE /2/users/{source_user_id}/muting/{target_user_id}
     - Causes the source User to unmute the target User. The source User must match the User context authorizing the request
     - OAuth:
       - type: oauth2
       - name: OAuth2UserToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter sourceUserId: (path) The ID of the authenticated source User that is requesting to unmute the target User. 
     - parameter targetUserId: (path) The ID of the User that the source User is requesting to unmute. 
     - returns: RequestBuilder<MuteUserMutationResponse> 
     */
    open class func usersIdUnmuteWithRequestBuilder(sourceUserId: String, targetUserId: String) -> RequestBuilder<MuteUserMutationResponse> {
        var localVariablePath = "/2/users/{source_user_id}/muting/{target_user_id}"
        let sourceUserIdPreEscape = "\(APIHelper.mapValueToPathItem(sourceUserId))"
        let sourceUserIdPostEscape = sourceUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{source_user_id}", with: sourceUserIdPostEscape, options: .literal, range: nil)
        let targetUserIdPreEscape = "\(APIHelper.mapValueToPathItem(targetUserId))"
        let targetUserIdPostEscape = targetUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{target_user_id}", with: targetUserIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenTwitterAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MuteUserMutationResponse>.Type = OpenTwitterAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
