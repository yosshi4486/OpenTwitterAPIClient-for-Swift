//
// UrlEntity.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Represent the portion of text recognized as a URL, and its start and end position within the text. */
public struct UrlEntity: Codable {

    /** Index (zero-based) at which position this entity starts.  The index is inclusive. */
    public var start: Int
    /** Index (zero-based) at which position this entity ends.  The index is exclusive. */
    public var end: Int
    /** A validly formatted URL. */
    public var url: String
    /** A validly formatted URL. */
    public var expandedUrl: String?
    /** The URL as displayed in the Twitter client. */
    public var displayUrl: String?
    /** Fully resolved url */
    public var unwoundUrl: String?
    /** HTTP Status Code. */
    public var status: Int?
    /** Title of the page the URL points to. */
    public var title: String?
    /** Description of the URL landing page. */
    public var description: String?
    public var images: [URLImage]?

    public init(start: Int, end: Int, url: String, expandedUrl: String? = nil, displayUrl: String? = nil, unwoundUrl: String? = nil, status: Int? = nil, title: String? = nil, description: String? = nil, images: [URLImage]? = nil) {
        self.start = start
        self.end = end
        self.url = url
        self.expandedUrl = expandedUrl
        self.displayUrl = displayUrl
        self.unwoundUrl = unwoundUrl
        self.status = status
        self.title = title
        self.description = description
        self.images = images
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case start
        case end
        case url
        case expandedUrl = "expanded_url"
        case displayUrl = "display_url"
        case unwoundUrl = "unwound_url"
        case status
        case title
        case description
        case images
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(start, forKey: .start)
        try container.encode(end, forKey: .end)
        try container.encode(url, forKey: .url)
        try container.encodeIfPresent(expandedUrl, forKey: .expandedUrl)
        try container.encodeIfPresent(displayUrl, forKey: .displayUrl)
        try container.encodeIfPresent(unwoundUrl, forKey: .unwoundUrl)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(images, forKey: .images)
    }
}

