//
// ComplianceJob.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ComplianceJob: Codable {

    /** Compliance Job ID */
    public var id: String
    public var type: ComplianceJobType
    /** Creation time of the compliance job. */
    public var createdAt: Date
    /** URL to which the user will upload their tweet or user IDs */
    public var uploadUrl: String
    /** Expiration time of the upload URL */
    public var uploadExpiresAt: Date
    /** URL from which the user will retrieve their compliance results */
    public var downloadUrl: String
    /** Expiration time of the download URL */
    public var downloadExpiresAt: Date
    /** User-provided name for a compliance job */
    public var name: String?
    public var status: ComplianceJobStatus

    public init(id: String, type: ComplianceJobType, createdAt: Date, uploadUrl: String, uploadExpiresAt: Date, downloadUrl: String, downloadExpiresAt: Date, name: String? = nil, status: ComplianceJobStatus) {
        self.id = id
        self.type = type
        self.createdAt = createdAt
        self.uploadUrl = uploadUrl
        self.uploadExpiresAt = uploadExpiresAt
        self.downloadUrl = downloadUrl
        self.downloadExpiresAt = downloadExpiresAt
        self.name = name
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case createdAt = "created_at"
        case uploadUrl = "upload_url"
        case uploadExpiresAt = "upload_expires_at"
        case downloadUrl = "download_url"
        case downloadExpiresAt = "download_expires_at"
        case name
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(type, forKey: .type)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(uploadUrl, forKey: .uploadUrl)
        try container.encode(uploadExpiresAt, forKey: .uploadExpiresAt)
        try container.encode(downloadUrl, forKey: .downloadUrl)
        try container.encode(downloadExpiresAt, forKey: .downloadExpiresAt)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(status, forKey: .status)
    }
}

