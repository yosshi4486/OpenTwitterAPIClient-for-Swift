//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UsersAPI {

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findUserById: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findUserById: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findUserById: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     User lookup by ID
     
     - parameter id: (path) Required. A User ID. 
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: SingleUserLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func findUserById(id: String, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> SingleUserLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            findUserByIdWithRequestBuilder(id: id, expansions: expansions, tweetFields: tweetFields, userFields: userFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     User lookup by ID
     - GET /2/users/{id}
     - This endpoint returns information about a user. Specify user by ID.
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) Required. A User ID. 
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<SingleUserLookupResponse> 
     */
    open class func findUserByIdWithRequestBuilder(id: String, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil) -> RequestBuilder<SingleUserLookupResponse> {
        var localVariablePath = "/2/users/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SingleUserLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findUserByUsername: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findUserByUsername: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findUserByUsername: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     User lookup by username
     
     - parameter username: (path) Required. A username. 
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: SingleUserLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func findUserByUsername(username: String, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> SingleUserLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            findUserByUsernameWithRequestBuilder(username: username, expansions: expansions, tweetFields: tweetFields, userFields: userFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     User lookup by username
     - GET /2/users/by/username/{username}
     - This endpoint returns information about a user. Specify user by username.
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter username: (path) Required. A username. 
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<SingleUserLookupResponse> 
     */
    open class func findUserByUsernameWithRequestBuilder(username: String, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil) -> RequestBuilder<SingleUserLookupResponse> {
        var localVariablePath = "/2/users/by/username/{username}"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SingleUserLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findUsersById: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findUsersById: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findUsersById: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     User lookup by IDs
     
     - parameter ids: (query) Required. A list of User IDs, comma-separated. You can specify up to 100 IDs. 
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MultiUserLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func findUsersById(ids: [String], expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MultiUserLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            findUsersByIdWithRequestBuilder(ids: ids, expansions: expansions, tweetFields: tweetFields, userFields: userFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     User lookup by IDs
     - GET /2/users
     - This endpoint returns information about users. Specify users by their ID.
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter ids: (query) Required. A list of User IDs, comma-separated. You can specify up to 100 IDs. 
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<MultiUserLookupResponse> 
     */
    open class func findUsersByIdWithRequestBuilder(ids: [String], expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil) -> RequestBuilder<MultiUserLookupResponse> {
        let localVariablePath = "/2/users"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": ids.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiUserLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findUsersByUsername: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findUsersByUsername: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findUsersByUsername: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     User lookup by usernames
     
     - parameter usernames: (query) Required . A list of usernames, comma-separated. You can specify up to 100 usernames. 
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MultiUserLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func findUsersByUsername(usernames: [String], expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MultiUserLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            findUsersByUsernameWithRequestBuilder(usernames: usernames, expansions: expansions, tweetFields: tweetFields, userFields: userFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     User lookup by usernames
     - GET /2/users/by
     - This endpoint returns information about users. Specify users by their username.
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter usernames: (query) Required . A list of usernames, comma-separated. You can specify up to 100 usernames. 
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<MultiUserLookupResponse> 
     */
    open class func findUsersByUsernameWithRequestBuilder(usernames: [String], expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil) -> RequestBuilder<MultiUserLookupResponse> {
        let localVariablePath = "/2/users/by"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "usernames": usernames.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiUserLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_listGetFollowers: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_listGetFollowers: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_listGetFollowers: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     Returns user objects that follow a List by the provided List ID
     
     - parameter id: (path) The ID of the List for which to return followers 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ListLookupMultipleUsersLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listGetFollowers(id: String, maxResults: Int? = nil, paginationToken: Int64? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ListLookupMultipleUsersLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listGetFollowersWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, expansions: expansions, tweetFields: tweetFields, userFields: userFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Returns user objects that follow a List by the provided List ID
     - GET /2/lists/{id}/followers
     - Returns a list of users that follow a List by the provided List ID
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List for which to return followers 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<ListLookupMultipleUsersLookupResponse> 
     */
    open class func listGetFollowersWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: Int64? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil) -> RequestBuilder<ListLookupMultipleUsersLookupResponse> {
        var localVariablePath = "/2/lists/{id}/followers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListLookupMultipleUsersLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_listGetMembers: String, CaseIterable {
        case pinnedTweetId = "pinned_tweet_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_listGetMembers: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_listGetMembers: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     Returns user objects that are members of a List by the provided List ID
     
     - parameter id: (path) The ID of the List for which to return members 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ListLookupMultipleUsersLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listGetMembers(id: String, maxResults: Int? = nil, paginationToken: Int64? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ListLookupMultipleUsersLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listGetMembersWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, expansions: expansions, tweetFields: tweetFields, userFields: userFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Returns user objects that are members of a List by the provided List ID
     - GET /2/lists/{id}/members
     - Returns a list of users that are members of a List by the provided List ID
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List for which to return members 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<ListLookupMultipleUsersLookupResponse> 
     */
    open class func listGetMembersWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: Int64? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil) -> RequestBuilder<ListLookupMultipleUsersLookupResponse> {
        var localVariablePath = "/2/lists/{id}/members"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListLookupMultipleUsersLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Returns user objects that have liked the provided Tweet ID
     
     - parameter id: (path) The ID of the Tweet for which to return results 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: GenericMultipleUsersLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func tweetsIdLikingUsers(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> GenericMultipleUsersLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            tweetsIdLikingUsersWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Returns user objects that have liked the provided Tweet ID
     - GET /2/tweets/{id}/liking_users
     - Returns a list of users that have liked the provided Tweet ID
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the Tweet for which to return results 
     - returns: RequestBuilder<GenericMultipleUsersLookupResponse> 
     */
    open class func tweetsIdLikingUsersWithRequestBuilder(id: String) -> RequestBuilder<GenericMultipleUsersLookupResponse> {
        var localVariablePath = "/2/tweets/{id}/liking_users"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericMultipleUsersLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Returns user objects that have retweeted the provided Tweet ID
     
     - parameter id: (path) The ID of the Tweet for which to return results 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: GenericMultipleUsersLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func tweetsIdRetweetingUsers(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> GenericMultipleUsersLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            tweetsIdRetweetingUsersWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Returns user objects that have retweeted the provided Tweet ID
     - GET /2/tweets/{id}/retweeted_by
     - Returns a list of users that have retweeted the provided Tweet ID
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the Tweet for which to return results 
     - returns: RequestBuilder<GenericMultipleUsersLookupResponse> 
     */
    open class func tweetsIdRetweetingUsersWithRequestBuilder(id: String) -> RequestBuilder<GenericMultipleUsersLookupResponse> {
        var localVariablePath = "/2/tweets/{id}/retweeted_by"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericMultipleUsersLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Block User by User ID
     
     - parameter id: (path) The ID of the user that is requesting to block the target user 
     - parameter inlineObject: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: UsersBlockingMutationResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdBlock(id: String, inlineObject: InlineObject? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> UsersBlockingMutationResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdBlockWithRequestBuilder(id: id, inlineObject: inlineObject).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Block User by User ID
     - POST /2/users/{id}/blocking
     - Causes the user (in the path) to block the target user. The user (in the path) must match the user context authorizing the request
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user that is requesting to block the target user 
     - parameter inlineObject: (body)  (optional)
     - returns: RequestBuilder<UsersBlockingMutationResponse> 
     */
    open class func usersIdBlockWithRequestBuilder(id: String, inlineObject: InlineObject? = nil) -> RequestBuilder<UsersBlockingMutationResponse> {
        var localVariablePath = "/2/users/{id}/blocking"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersBlockingMutationResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Returns user objects that are blocked by provided user ID
     
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional)
     - parameter paginationToken: (query) This value is populated by passing the &#39;next_token&#39; or &#39;previous_token&#39; returned in a request to paginate through results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: GenericMultipleUsersLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdBlocking(id: String, maxResults: Int? = nil, paginationToken: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> GenericMultipleUsersLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdBlockingWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Returns user objects that are blocked by provided user ID
     - GET /2/users/{id}/blocking
     - Returns a list of users that are blocked by the provided user ID
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional)
     - parameter paginationToken: (query) This value is populated by passing the &#39;next_token&#39; or &#39;previous_token&#39; returned in a request to paginate through results. (optional)
     - returns: RequestBuilder<GenericMultipleUsersLookupResponse> 
     */
    open class func usersIdBlockingWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil) -> RequestBuilder<GenericMultipleUsersLookupResponse> {
        var localVariablePath = "/2/users/{id}/blocking"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericMultipleUsersLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Follow User
     
     - parameter id: (path) The ID of the user that is requesting to follow the target user 
     - parameter inlineObject2: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: UsersFollowingCreateResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdFollow(id: String, inlineObject2: InlineObject2? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> UsersFollowingCreateResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdFollowWithRequestBuilder(id: id, inlineObject2: inlineObject2).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Follow User
     - POST /2/users/{id}/following
     - Causes the user(in the path) to follow, or “request to follow” for protected users, the target user. The user(in the path) must match the user context authorizing the request
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user that is requesting to follow the target user 
     - parameter inlineObject2: (body)  (optional)
     - returns: RequestBuilder<UsersFollowingCreateResponse> 
     */
    open class func usersIdFollowWithRequestBuilder(id: String, inlineObject2: InlineObject2? = nil) -> RequestBuilder<UsersFollowingCreateResponse> {
        var localVariablePath = "/2/users/{id}/following"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject2)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersFollowingCreateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Returns user objects that follow the provided user ID
     
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional)
     - parameter paginationToken: (query) This value is populated by passing the &#39;next_token&#39; or &#39;previous_token&#39; returned in a request to paginate through results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: GenericMultipleUsersLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdFollowers(id: String, maxResults: Int? = nil, paginationToken: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> GenericMultipleUsersLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdFollowersWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Returns user objects that follow the provided user ID
     - GET /2/users/{id}/followers
     - Returns a list of users that follow the provided user ID
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional)
     - parameter paginationToken: (query) This value is populated by passing the &#39;next_token&#39; or &#39;previous_token&#39; returned in a request to paginate through results. (optional)
     - returns: RequestBuilder<GenericMultipleUsersLookupResponse> 
     */
    open class func usersIdFollowersWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil) -> RequestBuilder<GenericMultipleUsersLookupResponse> {
        var localVariablePath = "/2/users/{id}/followers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericMultipleUsersLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Following by User ID
     
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional)
     - parameter paginationToken: (query) This value is populated by passing the &#39;next_token&#39; or &#39;previous_token&#39; returned in a request to paginate through results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: UsersFollowingLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdFollowing(id: String, maxResults: Int? = nil, paginationToken: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> UsersFollowingLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdFollowingWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Following by User ID
     - GET /2/users/{id}/following
     - Returns a list of users that are being followed by the provided user ID
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional)
     - parameter paginationToken: (query) This value is populated by passing the &#39;next_token&#39; or &#39;previous_token&#39; returned in a request to paginate through results. (optional)
     - returns: RequestBuilder<UsersFollowingLookupResponse> 
     */
    open class func usersIdFollowingWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil) -> RequestBuilder<UsersFollowingLookupResponse> {
        var localVariablePath = "/2/users/{id}/following"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersFollowingLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Mute User by User ID
     
     - parameter id: (path) The ID of the user that is requesting to mute the target user 
     - parameter inlineObject1: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: UsersMutingMutationResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdMute(id: String, inlineObject1: InlineObject1? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> UsersMutingMutationResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdMuteWithRequestBuilder(id: id, inlineObject1: inlineObject1).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Mute User by User ID
     - POST /2/users/{id}/muting
     - Causes the user (in the path) to mute the target user. The user (in the path) must match the user context authorizing the request
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user that is requesting to mute the target user 
     - parameter inlineObject1: (body)  (optional)
     - returns: RequestBuilder<UsersMutingMutationResponse> 
     */
    open class func usersIdMuteWithRequestBuilder(id: String, inlineObject1: InlineObject1? = nil) -> RequestBuilder<UsersMutingMutationResponse> {
        var localVariablePath = "/2/users/{id}/muting"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject1)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersMutingMutationResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Returns user objects that are muted by the provided user ID
     
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: GenericMultipleUsersLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdMuting(id: String, maxResults: Int? = nil, paginationToken: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> GenericMultipleUsersLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdMutingWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Returns user objects that are muted by the provided user ID
     - GET /2/users/{id}/muting
     - Returns a list of users that are muted by the provided user ID
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - returns: RequestBuilder<GenericMultipleUsersLookupResponse> 
     */
    open class func usersIdMutingWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil) -> RequestBuilder<GenericMultipleUsersLookupResponse> {
        var localVariablePath = "/2/users/{id}/muting"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericMultipleUsersLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unblock User by User ID
     
     - parameter sourceUserId: (path) The ID of the user that is requesting to unblock the target user 
     - parameter targetUserId: (path) The ID of the user that the source user is requesting to unblock 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: UsersBlockingMutationResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdUnblock(sourceUserId: String, targetUserId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> UsersBlockingMutationResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdUnblockWithRequestBuilder(sourceUserId: sourceUserId, targetUserId: targetUserId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Unblock User by User ID
     - DELETE /2/users/{source_user_id}/blocking/{target_user_id}
     - Causes the source user to unblock the target user. The source user must match the user context authorizing the request
     - BASIC:
       - type: http
       - name: UserToken
     - parameter sourceUserId: (path) The ID of the user that is requesting to unblock the target user 
     - parameter targetUserId: (path) The ID of the user that the source user is requesting to unblock 
     - returns: RequestBuilder<UsersBlockingMutationResponse> 
     */
    open class func usersIdUnblockWithRequestBuilder(sourceUserId: String, targetUserId: String) -> RequestBuilder<UsersBlockingMutationResponse> {
        var localVariablePath = "/2/users/{source_user_id}/blocking/{target_user_id}"
        let sourceUserIdPreEscape = "\(APIHelper.mapValueToPathItem(sourceUserId))"
        let sourceUserIdPostEscape = sourceUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{source_user_id}", with: sourceUserIdPostEscape, options: .literal, range: nil)
        let targetUserIdPreEscape = "\(APIHelper.mapValueToPathItem(targetUserId))"
        let targetUserIdPostEscape = targetUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{target_user_id}", with: targetUserIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersBlockingMutationResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unfollow User
     
     - parameter sourceUserId: (path) The ID of the user that is requesting to unfollow the target user 
     - parameter targetUserId: (path) The ID of the user that the source user is requesting to unfollow 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: UsersFollowingDeleteResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdUnfollow(sourceUserId: String, targetUserId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> UsersFollowingDeleteResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdUnfollowWithRequestBuilder(sourceUserId: sourceUserId, targetUserId: targetUserId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Unfollow User
     - DELETE /2/users/{source_user_id}/following/{target_user_id}
     - Causes the source user to unfollow the target user. The source user must match the user context authorizing the request
     - BASIC:
       - type: http
       - name: UserToken
     - parameter sourceUserId: (path) The ID of the user that is requesting to unfollow the target user 
     - parameter targetUserId: (path) The ID of the user that the source user is requesting to unfollow 
     - returns: RequestBuilder<UsersFollowingDeleteResponse> 
     */
    open class func usersIdUnfollowWithRequestBuilder(sourceUserId: String, targetUserId: String) -> RequestBuilder<UsersFollowingDeleteResponse> {
        var localVariablePath = "/2/users/{source_user_id}/following/{target_user_id}"
        let sourceUserIdPreEscape = "\(APIHelper.mapValueToPathItem(sourceUserId))"
        let sourceUserIdPostEscape = sourceUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{source_user_id}", with: sourceUserIdPostEscape, options: .literal, range: nil)
        let targetUserIdPreEscape = "\(APIHelper.mapValueToPathItem(targetUserId))"
        let targetUserIdPostEscape = targetUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{target_user_id}", with: targetUserIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersFollowingDeleteResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unmute User by User ID
     
     - parameter sourceUserId: (path) The ID of the user that is requesting to unmute the target user 
     - parameter targetUserId: (path) The ID of the user that the source user is requesting to unmute 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: UsersMutingMutationResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdUnmute(sourceUserId: String, targetUserId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> UsersMutingMutationResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdUnmuteWithRequestBuilder(sourceUserId: sourceUserId, targetUserId: targetUserId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Unmute User by User ID
     - DELETE /2/users/{source_user_id}/muting/{target_user_id}
     - Causes the source user to unmute the target user. The source user must match the user context authorizing the request
     - BASIC:
       - type: http
       - name: UserToken
     - parameter sourceUserId: (path) The ID of the user that is requesting to unmute the target user 
     - parameter targetUserId: (path) The ID of the user that the source user is requesting to unmute 
     - returns: RequestBuilder<UsersMutingMutationResponse> 
     */
    open class func usersIdUnmuteWithRequestBuilder(sourceUserId: String, targetUserId: String) -> RequestBuilder<UsersMutingMutationResponse> {
        var localVariablePath = "/2/users/{source_user_id}/muting/{target_user_id}"
        let sourceUserIdPreEscape = "\(APIHelper.mapValueToPathItem(sourceUserId))"
        let sourceUserIdPostEscape = sourceUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{source_user_id}", with: sourceUserIdPostEscape, options: .literal, range: nil)
        let targetUserIdPreEscape = "\(APIHelper.mapValueToPathItem(targetUserId))"
        let targetUserIdPostEscape = targetUserIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{target_user_id}", with: targetUserIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersMutingMutationResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
