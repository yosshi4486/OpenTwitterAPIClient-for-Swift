//
// TweetsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TweetsAPI {

    /**
     Add/Delete rules
     
     - parameter addOrDeleteRulesRequest: (body)  
     - parameter dryRun: (query) Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: AddOrDeleteRulesResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func addOrDeleteRules(addOrDeleteRulesRequest: AddOrDeleteRulesRequest, dryRun: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> AddOrDeleteRulesResponse {
        return try await withCheckedThrowingContinuation { continuation in
            addOrDeleteRulesWithRequestBuilder(addOrDeleteRulesRequest: addOrDeleteRulesRequest, dryRun: dryRun).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Add/Delete rules
     - POST /2/tweets/search/stream/rules
     - Add or delete rules from a user's active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter addOrDeleteRulesRequest: (body)  
     - parameter dryRun: (query) Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes. (optional)
     - returns: RequestBuilder<AddOrDeleteRulesResponse> 
     */
    open class func addOrDeleteRulesWithRequestBuilder(addOrDeleteRulesRequest: AddOrDeleteRulesRequest, dryRun: Bool? = nil) -> RequestBuilder<AddOrDeleteRulesResponse> {
        let localVariablePath = "/2/tweets/search/stream/rules"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addOrDeleteRulesRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "dry_run": dryRun?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddOrDeleteRulesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Creation of a Tweet
     
     - parameter inlineObject3: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: TweetCreateResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func createTweet(inlineObject3: InlineObject3? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> TweetCreateResponse {
        return try await withCheckedThrowingContinuation { continuation in
            createTweetWithRequestBuilder(inlineObject3: inlineObject3).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Creation of a Tweet
     - POST /2/tweets
     - Causes the user to create a tweet under the authorized account.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter inlineObject3: (body)  (optional)
     - returns: RequestBuilder<TweetCreateResponse> 
     */
    open class func createTweetWithRequestBuilder(inlineObject3: InlineObject3? = nil) -> RequestBuilder<TweetCreateResponse> {
        let localVariablePath = "/2/tweets"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject3)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TweetCreateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Tweet delete by Tweet ID
     
     - parameter id: (path) The ID of the Tweet to be deleted. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: TweetDeleteResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func deleteTweetById(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> TweetDeleteResponse {
        return try await withCheckedThrowingContinuation { continuation in
            deleteTweetByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Tweet delete by Tweet ID
     - DELETE /2/tweets/{id}
     - Delete specified Tweet (in the path) by ID.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the Tweet to be deleted. 
     - returns: RequestBuilder<TweetDeleteResponse> 
     */
    open class func deleteTweetByIdWithRequestBuilder(id: String) -> RequestBuilder<TweetDeleteResponse> {
        var localVariablePath = "/2/tweets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TweetDeleteResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findTweetById: String, CaseIterable {
        case authorId = "author_id"
        case referencedTweetsId = "referenced_tweets.id"
        case inReplyToUserId = "in_reply_to_user_id"
        case geoPlaceId = "geo.place_id"
        case attachmentsMediaKeys = "attachments.media_keys"
        case attachmentsPollIds = "attachments.poll_ids"
        case entitiesMentionsUsername = "entities.mentions.username"
        case referencedTweetsIdAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findTweetById: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findTweetById: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_findTweetById: String, CaseIterable {
        case mediaKey = "media_key"
        case durationMs = "duration_ms"
        case height = "height"
        case previewImageUrl = "preview_image_url"
        case type = "type"
        case url = "url"
        case width = "width"
        case publicMetrics = "public_metrics"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case promotedMetrics = "promoted_metrics"
        case altText = "alt_text"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_findTweetById: String, CaseIterable {
        case id = "id"
        case name = "name"
        case countryCode = "country_code"
        case placeType = "place_type"
        case fullName = "full_name"
        case country = "country"
        case containedWithin = "contained_within"
        case geo = "geo"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_findTweetById: String, CaseIterable {
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
        case endDatetime = "end_datetime"
        case durationMinutes = "duration_minutes"
    }

    /**
     Tweet lookup by Tweet ID
     
     - parameter id: (path) A single Tweet ID. 
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: SingleTweetLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func findTweetById(id: String, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> SingleTweetLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            findTweetByIdWithRequestBuilder(id: id, expansions: expansions, tweetFields: tweetFields, userFields: userFields, mediaFields: mediaFields, placeFields: placeFields, pollFields: pollFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Tweet lookup by Tweet ID
     - GET /2/tweets/{id}
     - Returns a variety of information about the Tweet specified by the requested ID.
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) A single Tweet ID. 
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - returns: RequestBuilder<SingleTweetLookupResponse> 
     */
    open class func findTweetByIdWithRequestBuilder(id: String, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil) -> RequestBuilder<SingleTweetLookupResponse> {
        var localVariablePath = "/2/tweets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SingleTweetLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findTweetsById: String, CaseIterable {
        case authorId = "author_id"
        case referencedTweetsId = "referenced_tweets.id"
        case inReplyToUserId = "in_reply_to_user_id"
        case geoPlaceId = "geo.place_id"
        case attachmentsMediaKeys = "attachments.media_keys"
        case attachmentsPollIds = "attachments.poll_ids"
        case entitiesMentionsUsername = "entities.mentions.username"
        case referencedTweetsIdAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_findTweetsById: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_findTweetsById: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_findTweetsById: String, CaseIterable {
        case mediaKey = "media_key"
        case durationMs = "duration_ms"
        case height = "height"
        case previewImageUrl = "preview_image_url"
        case type = "type"
        case url = "url"
        case width = "width"
        case publicMetrics = "public_metrics"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case promotedMetrics = "promoted_metrics"
        case altText = "alt_text"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_findTweetsById: String, CaseIterable {
        case id = "id"
        case name = "name"
        case countryCode = "country_code"
        case placeType = "place_type"
        case fullName = "full_name"
        case country = "country"
        case containedWithin = "contained_within"
        case geo = "geo"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_findTweetsById: String, CaseIterable {
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
        case endDatetime = "end_datetime"
        case durationMinutes = "duration_minutes"
    }

    /**
     Tweet lookup by Tweet IDs
     
     - parameter ids: (query) A comma separated list of Tweet IDs. Up to 100 are allowed in a single request. 
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MultiTweetLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func findTweetsById(ids: [String], expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MultiTweetLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            findTweetsByIdWithRequestBuilder(ids: ids, expansions: expansions, tweetFields: tweetFields, userFields: userFields, mediaFields: mediaFields, placeFields: placeFields, pollFields: pollFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Tweet lookup by Tweet IDs
     - GET /2/tweets
     - Returns a variety of information about the Tweet specified by the requested ID.
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter ids: (query) A comma separated list of Tweet IDs. Up to 100 are allowed in a single request. 
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - returns: RequestBuilder<MultiTweetLookupResponse> 
     */
    open class func findTweetsByIdWithRequestBuilder(ids: [String], expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil) -> RequestBuilder<MultiTweetLookupResponse> {
        let localVariablePath = "/2/tweets"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": ids.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiTweetLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Rules lookup
     
     - parameter ids: (query) A comma-separated list of Rule IDs. (optional)
     - parameter maxResults: (query) The maximum number of results (optional, default to 1000)
     - parameter paginationToken: (query) This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: InlineResponse2001
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getRules(ids: [String]? = nil, maxResults: Int? = nil, paginationToken: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> InlineResponse2001 {
        return try await withCheckedThrowingContinuation { continuation in
            getRulesWithRequestBuilder(ids: ids, maxResults: maxResults, paginationToken: paginationToken).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Rules lookup
     - GET /2/tweets/search/stream/rules
     - Returns rules from a user's active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter ids: (query) A comma-separated list of Rule IDs. (optional)
     - parameter maxResults: (query) The maximum number of results (optional, default to 1000)
     - parameter paginationToken: (query) This value is populated by passing the &#39;next_token&#39; returned in a request to paginate through results. (optional)
     - returns: RequestBuilder<InlineResponse2001> 
     */
    open class func getRulesWithRequestBuilder(ids: [String]? = nil, maxResults: Int? = nil, paginationToken: String? = nil) -> RequestBuilder<InlineResponse2001> {
        let localVariablePath = "/2/tweets/search/stream/rules"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": ids?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InlineResponse2001>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Hide replies
     
     - parameter id: (path) The ID of the reply that you want to hide or unhide. 
     - parameter inlineObject4: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: InlineResponse200
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func hideReplyById(id: String, inlineObject4: InlineObject4? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> InlineResponse200 {
        return try await withCheckedThrowingContinuation { continuation in
            hideReplyByIdWithRequestBuilder(id: id, inlineObject4: inlineObject4).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Hide replies
     - PUT /2/tweets/{id}/hidden
     - Hides or unhides a reply to an owned conversation.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the reply that you want to hide or unhide. 
     - parameter inlineObject4: (body)  (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func hideReplyByIdWithRequestBuilder(id: String, inlineObject4: InlineObject4? = nil) -> RequestBuilder<InlineResponse200> {
        var localVariablePath = "/2/tweets/{id}/hidden"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject4)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InlineResponse200>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_listsIdTweets: String, CaseIterable {
        case authorId = "author_id"
        case referencedTweetsId = "referenced_tweets.id"
        case inReplyToUserId = "in_reply_to_user_id"
        case geoPlaceId = "geo.place_id"
        case attachmentsMediaKeys = "attachments.media_keys"
        case attachmentsPollIds = "attachments.poll_ids"
        case entitiesMentionsUsername = "entities.mentions.username"
        case referencedTweetsIdAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_listsIdTweets: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_listsIdTweets: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_listsIdTweets: String, CaseIterable {
        case mediaKey = "media_key"
        case durationMs = "duration_ms"
        case height = "height"
        case previewImageUrl = "preview_image_url"
        case type = "type"
        case url = "url"
        case width = "width"
        case publicMetrics = "public_metrics"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case promotedMetrics = "promoted_metrics"
        case altText = "alt_text"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_listsIdTweets: String, CaseIterable {
        case id = "id"
        case name = "name"
        case countryCode = "country_code"
        case placeType = "place_type"
        case fullName = "full_name"
        case country = "country"
        case containedWithin = "contained_within"
        case geo = "geo"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_listsIdTweets: String, CaseIterable {
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
        case endDatetime = "end_datetime"
        case durationMinutes = "duration_minutes"
    }

    /**
     List Tweets timeline by List ID
     
     - parameter id: (path) The ID of the List to list Tweets of 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: InlineResponse2002
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listsIdTweets(id: String, maxResults: Int? = nil, paginationToken: String? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> InlineResponse2002 {
        return try await withCheckedThrowingContinuation { continuation in
            listsIdTweetsWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, expansions: expansions, tweetFields: tweetFields, userFields: userFields, mediaFields: mediaFields, placeFields: placeFields, pollFields: pollFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     List Tweets timeline by List ID
     - GET /2/lists/{id}/tweets
     - Returns a list of Tweets associated with the provided List ID
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List to list Tweets of 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func listsIdTweetsWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil) -> RequestBuilder<InlineResponse2002> {
        var localVariablePath = "/2/lists/{id}/tweets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InlineResponse2002>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_sampleStream: String, CaseIterable {
        case authorId = "author_id"
        case referencedTweetsId = "referenced_tweets.id"
        case inReplyToUserId = "in_reply_to_user_id"
        case geoPlaceId = "geo.place_id"
        case attachmentsMediaKeys = "attachments.media_keys"
        case attachmentsPollIds = "attachments.poll_ids"
        case entitiesMentionsUsername = "entities.mentions.username"
        case referencedTweetsIdAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_sampleStream: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_sampleStream: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_sampleStream: String, CaseIterable {
        case mediaKey = "media_key"
        case durationMs = "duration_ms"
        case height = "height"
        case previewImageUrl = "preview_image_url"
        case type = "type"
        case url = "url"
        case width = "width"
        case publicMetrics = "public_metrics"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case promotedMetrics = "promoted_metrics"
        case altText = "alt_text"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_sampleStream: String, CaseIterable {
        case id = "id"
        case name = "name"
        case countryCode = "country_code"
        case placeType = "place_type"
        case fullName = "full_name"
        case country = "country"
        case containedWithin = "contained_within"
        case geo = "geo"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_sampleStream: String, CaseIterable {
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
        case endDatetime = "end_datetime"
        case durationMinutes = "duration_minutes"
    }

    /**
     Sample stream
     
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter backfillMinutes: (query) The number of minutes of backfill requested (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: StreamingTweet
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func sampleStream(expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil, backfillMinutes: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> StreamingTweet {
        return try await withCheckedThrowingContinuation { continuation in
            sampleStreamWithRequestBuilder(expansions: expansions, tweetFields: tweetFields, userFields: userFields, mediaFields: mediaFields, placeFields: placeFields, pollFields: pollFields, backfillMinutes: backfillMinutes).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Sample stream
     - GET /2/tweets/sample/stream
     - Streams a deterministic 1% of public Tweets.
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter backfillMinutes: (query) The number of minutes of backfill requested (optional)
     - returns: RequestBuilder<StreamingTweet> 
     */
    open class func sampleStreamWithRequestBuilder(expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil, backfillMinutes: Int? = nil) -> RequestBuilder<StreamingTweet> {
        let localVariablePath = "/2/tweets/sample/stream"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "backfill_minutes": backfillMinutes?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StreamingTweet>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_searchStream: String, CaseIterable {
        case authorId = "author_id"
        case referencedTweetsId = "referenced_tweets.id"
        case inReplyToUserId = "in_reply_to_user_id"
        case geoPlaceId = "geo.place_id"
        case attachmentsMediaKeys = "attachments.media_keys"
        case attachmentsPollIds = "attachments.poll_ids"
        case entitiesMentionsUsername = "entities.mentions.username"
        case referencedTweetsIdAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_searchStream: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_searchStream: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_searchStream: String, CaseIterable {
        case mediaKey = "media_key"
        case durationMs = "duration_ms"
        case height = "height"
        case previewImageUrl = "preview_image_url"
        case type = "type"
        case url = "url"
        case width = "width"
        case publicMetrics = "public_metrics"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case promotedMetrics = "promoted_metrics"
        case altText = "alt_text"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_searchStream: String, CaseIterable {
        case id = "id"
        case name = "name"
        case countryCode = "country_code"
        case placeType = "place_type"
        case fullName = "full_name"
        case country = "country"
        case containedWithin = "contained_within"
        case geo = "geo"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_searchStream: String, CaseIterable {
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
        case endDatetime = "end_datetime"
        case durationMinutes = "duration_minutes"
    }

    /**
     Filtered stream
     
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter backfillMinutes: (query) The number of minutes of backfill requested (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: FilteredStreamingTweet
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func searchStream(expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil, backfillMinutes: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> FilteredStreamingTweet {
        return try await withCheckedThrowingContinuation { continuation in
            searchStreamWithRequestBuilder(expansions: expansions, tweetFields: tweetFields, userFields: userFields, mediaFields: mediaFields, placeFields: placeFields, pollFields: pollFields, backfillMinutes: backfillMinutes).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Filtered stream
     - GET /2/tweets/search/stream
     - Streams Tweets matching the stream's active rule set.
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter backfillMinutes: (query) The number of minutes of backfill requested (optional)
     - returns: RequestBuilder<FilteredStreamingTweet> 
     */
    open class func searchStreamWithRequestBuilder(expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil, backfillMinutes: Int? = nil) -> RequestBuilder<FilteredStreamingTweet> {
        let localVariablePath = "/2/tweets/search/stream"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
            "backfill_minutes": backfillMinutes?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FilteredStreamingTweet>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_spaceBuyers: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     Retrieve the list of users who purchased a ticket to the given space
     
     - parameter id: (path) The space id from which tweets will be retrieved 
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MultiUserLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func spaceBuyers(id: String, userFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MultiUserLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            spaceBuyersWithRequestBuilder(id: id, userFields: userFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Retrieve the list of users who purchased a ticket to the given space
     - GET /2/spaces/{id}/buyers
     - Retrieves the list of users who purchased a ticket to the given space
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The space id from which tweets will be retrieved 
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<MultiUserLookupResponse> 
     */
    open class func spaceBuyersWithRequestBuilder(id: String, userFields: Set<String>? = nil) -> RequestBuilder<MultiUserLookupResponse> {
        var localVariablePath = "/2/spaces/{id}/buyers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiUserLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Full archive search counts
     
     - parameter query: (query) One query/rule/filter for matching Tweets. Up to 2048 characters. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter granularity: (query) The granularity for the search counts results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: TweetCountsResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func tweetCountsFullArchiveSearch(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, nextToken: String? = nil, granularity: Granularity? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> TweetCountsResponse {
        return try await withCheckedThrowingContinuation { continuation in
            tweetCountsFullArchiveSearchWithRequestBuilder(query: query, startTime: startTime, endTime: endTime, sinceId: sinceId, untilId: untilId, nextToken: nextToken, granularity: granularity).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Full archive search counts
     - GET /2/tweets/counts/all
     - Returns Tweet Counts that match a search query.
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter query: (query) One query/rule/filter for matching Tweets. Up to 2048 characters. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter granularity: (query) The granularity for the search counts results. (optional)
     - returns: RequestBuilder<TweetCountsResponse> 
     */
    open class func tweetCountsFullArchiveSearchWithRequestBuilder(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, nextToken: String? = nil, granularity: Granularity? = nil) -> RequestBuilder<TweetCountsResponse> {
        let localVariablePath = "/2/tweets/counts/all"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query.encodeToJSON(),
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "since_id": sinceId?.encodeToJSON(),
            "until_id": untilId?.encodeToJSON(),
            "next_token": nextToken?.encodeToJSON(),
            "granularity": granularity?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TweetCountsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Recent search counts
     
     - parameter query: (query) One query/rule/filter for matching Tweets. Up to 2048 characters. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter granularity: (query) The granularity for the search counts results. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: TweetCountsResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func tweetCountsRecentSearch(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, nextToken: String? = nil, granularity: Granularity? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> TweetCountsResponse {
        return try await withCheckedThrowingContinuation { continuation in
            tweetCountsRecentSearchWithRequestBuilder(query: query, startTime: startTime, endTime: endTime, sinceId: sinceId, untilId: untilId, nextToken: nextToken, granularity: granularity).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Recent search counts
     - GET /2/tweets/counts/recent
     - Returns Tweet Counts from the last 7 days that match a search query.
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter query: (query) One query/rule/filter for matching Tweets. Up to 2048 characters. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter granularity: (query) The granularity for the search counts results. (optional)
     - returns: RequestBuilder<TweetCountsResponse> 
     */
    open class func tweetCountsRecentSearchWithRequestBuilder(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, nextToken: String? = nil, granularity: Granularity? = nil) -> RequestBuilder<TweetCountsResponse> {
        let localVariablePath = "/2/tweets/counts/recent"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query.encodeToJSON(),
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "since_id": sinceId?.encodeToJSON(),
            "until_id": untilId?.encodeToJSON(),
            "next_token": nextToken?.encodeToJSON(),
            "granularity": granularity?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TweetCountsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_tweetsFullarchiveSearch: String, CaseIterable {
        case authorId = "author_id"
        case referencedTweetsId = "referenced_tweets.id"
        case inReplyToUserId = "in_reply_to_user_id"
        case geoPlaceId = "geo.place_id"
        case attachmentsMediaKeys = "attachments.media_keys"
        case attachmentsPollIds = "attachments.poll_ids"
        case entitiesMentionsUsername = "entities.mentions.username"
        case referencedTweetsIdAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_tweetsFullarchiveSearch: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_tweetsFullarchiveSearch: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_tweetsFullarchiveSearch: String, CaseIterable {
        case mediaKey = "media_key"
        case durationMs = "duration_ms"
        case height = "height"
        case previewImageUrl = "preview_image_url"
        case type = "type"
        case url = "url"
        case width = "width"
        case publicMetrics = "public_metrics"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case promotedMetrics = "promoted_metrics"
        case altText = "alt_text"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_tweetsFullarchiveSearch: String, CaseIterable {
        case id = "id"
        case name = "name"
        case countryCode = "country_code"
        case placeType = "place_type"
        case fullName = "full_name"
        case country = "country"
        case containedWithin = "contained_within"
        case geo = "geo"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_tweetsFullarchiveSearch: String, CaseIterable {
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
        case endDatetime = "end_datetime"
        case durationMinutes = "duration_minutes"
    }

    /**
     Full-archive search
     
     - parameter query: (query) One query/rule/filter for matching Tweets. Up to 1024 characters. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter maxResults: (query) The maximum number of search results to be returned by a request. (optional, default to 10)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: TweetSearchResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func tweetsFullarchiveSearch(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> TweetSearchResponse {
        return try await withCheckedThrowingContinuation { continuation in
            tweetsFullarchiveSearchWithRequestBuilder(query: query, startTime: startTime, endTime: endTime, sinceId: sinceId, untilId: untilId, maxResults: maxResults, nextToken: nextToken, expansions: expansions, tweetFields: tweetFields, userFields: userFields, mediaFields: mediaFields, placeFields: placeFields, pollFields: pollFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Full-archive search
     - GET /2/tweets/search/all
     - Returns Tweets that match a search query.
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter query: (query) One query/rule/filter for matching Tweets. Up to 1024 characters. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter maxResults: (query) The maximum number of search results to be returned by a request. (optional, default to 10)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - returns: RequestBuilder<TweetSearchResponse> 
     */
    open class func tweetsFullarchiveSearchWithRequestBuilder(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil) -> RequestBuilder<TweetSearchResponse> {
        let localVariablePath = "/2/tweets/search/all"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query.encodeToJSON(),
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "since_id": sinceId?.encodeToJSON(),
            "until_id": untilId?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "next_token": nextToken?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TweetSearchResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_tweetsRecentSearch: String, CaseIterable {
        case authorId = "author_id"
        case referencedTweetsId = "referenced_tweets.id"
        case inReplyToUserId = "in_reply_to_user_id"
        case geoPlaceId = "geo.place_id"
        case attachmentsMediaKeys = "attachments.media_keys"
        case attachmentsPollIds = "attachments.poll_ids"
        case entitiesMentionsUsername = "entities.mentions.username"
        case referencedTweetsIdAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_tweetsRecentSearch: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_tweetsRecentSearch: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_tweetsRecentSearch: String, CaseIterable {
        case mediaKey = "media_key"
        case durationMs = "duration_ms"
        case height = "height"
        case previewImageUrl = "preview_image_url"
        case type = "type"
        case url = "url"
        case width = "width"
        case publicMetrics = "public_metrics"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case promotedMetrics = "promoted_metrics"
        case altText = "alt_text"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_tweetsRecentSearch: String, CaseIterable {
        case id = "id"
        case name = "name"
        case countryCode = "country_code"
        case placeType = "place_type"
        case fullName = "full_name"
        case country = "country"
        case containedWithin = "contained_within"
        case geo = "geo"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_tweetsRecentSearch: String, CaseIterable {
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
        case endDatetime = "end_datetime"
        case durationMinutes = "duration_minutes"
    }

    /**
     Recent search
     
     - parameter query: (query) One query/rule/filter for matching Tweets. Up to 512 characters. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter maxResults: (query) The maximum number of search results to be returned by a request. (optional, default to 10)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: TweetSearchResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func tweetsRecentSearch(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> TweetSearchResponse {
        return try await withCheckedThrowingContinuation { continuation in
            tweetsRecentSearchWithRequestBuilder(query: query, startTime: startTime, endTime: endTime, sinceId: sinceId, untilId: untilId, maxResults: maxResults, nextToken: nextToken, expansions: expansions, tweetFields: tweetFields, userFields: userFields, mediaFields: mediaFields, placeFields: placeFields, pollFields: pollFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Recent search
     - GET /2/tweets/search/recent
     - Returns Tweets from the last 7 days that match a search query.
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter query: (query) One query/rule/filter for matching Tweets. Up to 512 characters. 
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute). (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute). (optional)
     - parameter sinceId: (query) Returns results with a Tweet ID greater than (that is, more recent than) the specified ID. (optional)
     - parameter untilId: (query) Returns results with a Tweet ID less than (that is, older than) the specified ID. (optional)
     - parameter maxResults: (query) The maximum number of search results to be returned by a request. (optional, default to 10)
     - parameter nextToken: (query) This parameter is used to get the next &#39;page&#39; of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - returns: RequestBuilder<TweetSearchResponse> 
     */
    open class func tweetsRecentSearchWithRequestBuilder(query: String, startTime: Date? = nil, endTime: Date? = nil, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, nextToken: String? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil) -> RequestBuilder<TweetSearchResponse> {
        let localVariablePath = "/2/tweets/search/recent"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query.encodeToJSON(),
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "since_id": sinceId?.encodeToJSON(),
            "until_id": untilId?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "next_token": nextToken?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TweetSearchResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Causes the user (in the path) to like the specified tweet
     
     - parameter id: (path) The ID of the user that is requesting to like the tweet 
     - parameter usersLikesCreateRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: UsersLikesCreateResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdLike(id: String, usersLikesCreateRequest: UsersLikesCreateRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> UsersLikesCreateResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdLikeWithRequestBuilder(id: id, usersLikesCreateRequest: usersLikesCreateRequest).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Causes the user (in the path) to like the specified tweet
     - POST /2/users/{id}/likes
     - Causes the user (in the path) to like the specified tweet. The user in the path must match the user context authorizing the request.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user that is requesting to like the tweet 
     - parameter usersLikesCreateRequest: (body)  (optional)
     - returns: RequestBuilder<UsersLikesCreateResponse> 
     */
    open class func usersIdLikeWithRequestBuilder(id: String, usersLikesCreateRequest: UsersLikesCreateRequest? = nil) -> RequestBuilder<UsersLikesCreateResponse> {
        var localVariablePath = "/2/users/{id}/likes"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usersLikesCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersLikesCreateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_usersIdLikedTweets: String, CaseIterable {
        case authorId = "author_id"
        case referencedTweetsId = "referenced_tweets.id"
        case inReplyToUserId = "in_reply_to_user_id"
        case geoPlaceId = "geo.place_id"
        case attachmentsMediaKeys = "attachments.media_keys"
        case attachmentsPollIds = "attachments.poll_ids"
        case entitiesMentionsUsername = "entities.mentions.username"
        case referencedTweetsIdAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_usersIdLikedTweets: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_usersIdLikedTweets: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_usersIdLikedTweets: String, CaseIterable {
        case mediaKey = "media_key"
        case durationMs = "duration_ms"
        case height = "height"
        case previewImageUrl = "preview_image_url"
        case type = "type"
        case url = "url"
        case width = "width"
        case publicMetrics = "public_metrics"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case promotedMetrics = "promoted_metrics"
        case altText = "alt_text"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_usersIdLikedTweets: String, CaseIterable {
        case id = "id"
        case name = "name"
        case countryCode = "country_code"
        case placeType = "place_type"
        case fullName = "full_name"
        case country = "country"
        case containedWithin = "contained_within"
        case geo = "geo"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_usersIdLikedTweets: String, CaseIterable {
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
        case endDatetime = "end_datetime"
        case durationMinutes = "duration_minutes"
    }

    /**
     Returns Tweet objects liked by the provided User ID
     
     - parameter id: (path) The ID of the User to list the liked Tweets of 
     - parameter maxResults: (query) The maximum number of results (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: InlineResponse2002
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdLikedTweets(id: String, maxResults: Int? = nil, paginationToken: String? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> InlineResponse2002 {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdLikedTweetsWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, expansions: expansions, tweetFields: tweetFields, userFields: userFields, mediaFields: mediaFields, placeFields: placeFields, pollFields: pollFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Returns Tweet objects liked by the provided User ID
     - GET /2/users/{id}/liked_tweets
     - Returns a list of Tweets liked by the provided User ID
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the User to list the liked Tweets of 
     - parameter maxResults: (query) The maximum number of results (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - returns: RequestBuilder<InlineResponse2002> 
     */
    open class func usersIdLikedTweetsWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: String? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil) -> RequestBuilder<InlineResponse2002> {
        var localVariablePath = "/2/users/{id}/liked_tweets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InlineResponse2002>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_usersIdMentions: String, CaseIterable {
        case authorId = "author_id"
        case referencedTweetsId = "referenced_tweets.id"
        case inReplyToUserId = "in_reply_to_user_id"
        case geoPlaceId = "geo.place_id"
        case attachmentsMediaKeys = "attachments.media_keys"
        case attachmentsPollIds = "attachments.poll_ids"
        case entitiesMentionsUsername = "entities.mentions.username"
        case referencedTweetsIdAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_usersIdMentions: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_usersIdMentions: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_usersIdMentions: String, CaseIterable {
        case mediaKey = "media_key"
        case durationMs = "duration_ms"
        case height = "height"
        case previewImageUrl = "preview_image_url"
        case type = "type"
        case url = "url"
        case width = "width"
        case publicMetrics = "public_metrics"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case promotedMetrics = "promoted_metrics"
        case altText = "alt_text"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_usersIdMentions: String, CaseIterable {
        case id = "id"
        case name = "name"
        case countryCode = "country_code"
        case placeType = "place_type"
        case fullName = "full_name"
        case country = "country"
        case containedWithin = "contained_within"
        case geo = "geo"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_usersIdMentions: String, CaseIterable {
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
        case endDatetime = "end_datetime"
        case durationMinutes = "duration_minutes"
    }

    /**
     User mention timeline by User ID
     
     - parameter id: (path) The ID of the User to list mentions of 
     - parameter sinceId: (query) The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
     - parameter untilId: (query) The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
     - parameter maxResults: (query) The maximum number of results (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: GenericTweetsTimelineResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdMentions(id: String, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, paginationToken: String? = nil, startTime: Date? = nil, endTime: Date? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> GenericTweetsTimelineResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdMentionsWithRequestBuilder(id: id, sinceId: sinceId, untilId: untilId, maxResults: maxResults, paginationToken: paginationToken, startTime: startTime, endTime: endTime, expansions: expansions, tweetFields: tweetFields, userFields: userFields, mediaFields: mediaFields, placeFields: placeFields, pollFields: pollFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     User mention timeline by User ID
     - GET /2/users/{id}/mentions
     - Returns Tweet objects that mention username associated to the provided User ID
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the User to list mentions of 
     - parameter sinceId: (query) The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
     - parameter untilId: (query) The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
     - parameter maxResults: (query) The maximum number of results (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - returns: RequestBuilder<GenericTweetsTimelineResponse> 
     */
    open class func usersIdMentionsWithRequestBuilder(id: String, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, paginationToken: String? = nil, startTime: Date? = nil, endTime: Date? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil) -> RequestBuilder<GenericTweetsTimelineResponse> {
        var localVariablePath = "/2/users/{id}/mentions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "since_id": sinceId?.encodeToJSON(),
            "until_id": untilId?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericTweetsTimelineResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Causes the user (in the path) to retweet the specified tweet
     
     - parameter id: (path) The ID of the user that is requesting to retweet the tweet 
     - parameter usersRetweetsCreateRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: UsersRetweetsCreateResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdRetweets(id: String, usersRetweetsCreateRequest: UsersRetweetsCreateRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> UsersRetweetsCreateResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdRetweetsWithRequestBuilder(id: id, usersRetweetsCreateRequest: usersRetweetsCreateRequest).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Causes the user (in the path) to retweet the specified tweet
     - POST /2/users/{id}/retweets
     - Causes the user (in the path) to retweet the specified tweet. The user in the path must match the user context authorizing the request.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user that is requesting to retweet the tweet 
     - parameter usersRetweetsCreateRequest: (body)  (optional)
     - returns: RequestBuilder<UsersRetweetsCreateResponse> 
     */
    open class func usersIdRetweetsWithRequestBuilder(id: String, usersRetweetsCreateRequest: UsersRetweetsCreateRequest? = nil) -> RequestBuilder<UsersRetweetsCreateResponse> {
        var localVariablePath = "/2/users/{id}/retweets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: usersRetweetsCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersRetweetsCreateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter exclude
     */
    public enum Exclude_usersIdTweets: String, CaseIterable {
        case replies = "replies"
        case retweets = "retweets"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_usersIdTweets: String, CaseIterable {
        case authorId = "author_id"
        case referencedTweetsId = "referenced_tweets.id"
        case inReplyToUserId = "in_reply_to_user_id"
        case geoPlaceId = "geo.place_id"
        case attachmentsMediaKeys = "attachments.media_keys"
        case attachmentsPollIds = "attachments.poll_ids"
        case entitiesMentionsUsername = "entities.mentions.username"
        case referencedTweetsIdAuthorId = "referenced_tweets.id.author_id"
    }

    /**
     * enum for parameter tweetFields
     */
    public enum TweetFields_usersIdTweets: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case text = "text"
        case authorId = "author_id"
        case inReplyToUserId = "in_reply_to_user_id"
        case referencedTweets = "referenced_tweets"
        case attachments = "attachments"
        case withheld = "withheld"
        case geo = "geo"
        case entities = "entities"
        case publicMetrics = "public_metrics"
        case possiblySensitive = "possibly_sensitive"
        case source = "source"
        case lang = "lang"
        case contextAnnotations = "context_annotations"
        case nonPublicMetrics = "non_public_metrics"
        case promotedMetrics = "promoted_metrics"
        case organicMetrics = "organic_metrics"
        case conversationId = "conversation_id"
        case replySettings = "reply_settings"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_usersIdTweets: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     * enum for parameter mediaFields
     */
    public enum MediaFields_usersIdTweets: String, CaseIterable {
        case mediaKey = "media_key"
        case durationMs = "duration_ms"
        case height = "height"
        case previewImageUrl = "preview_image_url"
        case type = "type"
        case url = "url"
        case width = "width"
        case publicMetrics = "public_metrics"
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case promotedMetrics = "promoted_metrics"
        case altText = "alt_text"
    }

    /**
     * enum for parameter placeFields
     */
    public enum PlaceFields_usersIdTweets: String, CaseIterable {
        case id = "id"
        case name = "name"
        case countryCode = "country_code"
        case placeType = "place_type"
        case fullName = "full_name"
        case country = "country"
        case containedWithin = "contained_within"
        case geo = "geo"
    }

    /**
     * enum for parameter pollFields
     */
    public enum PollFields_usersIdTweets: String, CaseIterable {
        case id = "id"
        case options = "options"
        case votingStatus = "voting_status"
        case endDatetime = "end_datetime"
        case durationMinutes = "duration_minutes"
    }

    /**
     User Tweets timeline by User ID
     
     - parameter id: (path) The ID of the User to list Tweets of 
     - parameter sinceId: (query) The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
     - parameter untilId: (query) The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
     - parameter maxResults: (query) The maximum number of results (optional)
     - parameter exclude: (query) The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;) (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: GenericTweetsTimelineResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdTweets(id: String, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, exclude: Set<String>? = nil, paginationToken: String? = nil, startTime: Date? = nil, endTime: Date? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> GenericTweetsTimelineResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdTweetsWithRequestBuilder(id: id, sinceId: sinceId, untilId: untilId, maxResults: maxResults, exclude: exclude, paginationToken: paginationToken, startTime: startTime, endTime: endTime, expansions: expansions, tweetFields: tweetFields, userFields: userFields, mediaFields: mediaFields, placeFields: placeFields, pollFields: pollFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     User Tweets timeline by User ID
     - GET /2/users/{id}/tweets
     - Returns a list of Tweets authored by the provided User ID
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the User to list Tweets of 
     - parameter sinceId: (query) The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified. (optional)
     - parameter untilId: (query) The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified. (optional)
     - parameter maxResults: (query) The maximum number of results (optional)
     - parameter exclude: (query) The set of entities to exclude (e.g. &#39;replies&#39; or &#39;retweets&#39;) (optional)
     - parameter paginationToken: (query) This parameter is used to get the next &#39;page&#39; of results. (optional)
     - parameter startTime: (query) YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified. (optional)
     - parameter endTime: (query) YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter tweetFields: (query) A comma separated list of Tweet fields to display. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter mediaFields: (query) A comma separated list of Media fields to display. (optional)
     - parameter placeFields: (query) A comma separated list of Place fields to display. (optional)
     - parameter pollFields: (query) A comma separated list of Poll fields to display. (optional)
     - returns: RequestBuilder<GenericTweetsTimelineResponse> 
     */
    open class func usersIdTweetsWithRequestBuilder(id: String, sinceId: String? = nil, untilId: String? = nil, maxResults: Int? = nil, exclude: Set<String>? = nil, paginationToken: String? = nil, startTime: Date? = nil, endTime: Date? = nil, expansions: Set<String>? = nil, tweetFields: Set<String>? = nil, userFields: Set<String>? = nil, mediaFields: Set<String>? = nil, placeFields: Set<String>? = nil, pollFields: Set<String>? = nil) -> RequestBuilder<GenericTweetsTimelineResponse> {
        var localVariablePath = "/2/users/{id}/tweets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "since_id": sinceId?.encodeToJSON(),
            "until_id": untilId?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "exclude": exclude?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "start_time": startTime?.encodeToJSON(),
            "end_time": endTime?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "tweet.fields": tweetFields?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
            "media.fields": mediaFields?.encodeToJSON(),
            "place.fields": placeFields?.encodeToJSON(),
            "poll.fields": pollFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenericTweetsTimelineResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Causes the user (in the path) to unlike the specified tweet
     
     - parameter id: (path) The ID of the user that is requesting to unlike the tweet 
     - parameter tweetId: (path) The ID of the tweet that the user is requesting to unlike 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: UsersLikesDeleteResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdUnlike(id: String, tweetId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> UsersLikesDeleteResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdUnlikeWithRequestBuilder(id: id, tweetId: tweetId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Causes the user (in the path) to unlike the specified tweet
     - DELETE /2/users/{id}/likes/{tweet_id}
     - Causes the user (in the path) to unlike the specified tweet. The user must match the user context authorizing the request
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user that is requesting to unlike the tweet 
     - parameter tweetId: (path) The ID of the tweet that the user is requesting to unlike 
     - returns: RequestBuilder<UsersLikesDeleteResponse> 
     */
    open class func usersIdUnlikeWithRequestBuilder(id: String, tweetId: String) -> RequestBuilder<UsersLikesDeleteResponse> {
        var localVariablePath = "/2/users/{id}/likes/{tweet_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let tweetIdPreEscape = "\(APIHelper.mapValueToPathItem(tweetId))"
        let tweetIdPostEscape = tweetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{tweet_id}", with: tweetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersLikesDeleteResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Causes the user (in the path) to unretweet the specified tweet
     
     - parameter id: (path) The ID of the user that is requesting to unretweet the tweet 
     - parameter sourceTweetId: (path) The ID of the tweet that the user is requesting to unretweet 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: UsersRetweetsDeleteResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func usersIdUnretweets(id: String, sourceTweetId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> UsersRetweetsDeleteResponse {
        return try await withCheckedThrowingContinuation { continuation in
            usersIdUnretweetsWithRequestBuilder(id: id, sourceTweetId: sourceTweetId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Causes the user (in the path) to unretweet the specified tweet
     - DELETE /2/users/{id}/retweets/{source_tweet_id}
     - Causes the user (in the path) to unretweet the specified tweet. The user must match the user context authorizing the request
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user that is requesting to unretweet the tweet 
     - parameter sourceTweetId: (path) The ID of the tweet that the user is requesting to unretweet 
     - returns: RequestBuilder<UsersRetweetsDeleteResponse> 
     */
    open class func usersIdUnretweetsWithRequestBuilder(id: String, sourceTweetId: String) -> RequestBuilder<UsersRetweetsDeleteResponse> {
        var localVariablePath = "/2/users/{id}/retweets/{source_tweet_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let sourceTweetIdPreEscape = "\(APIHelper.mapValueToPathItem(sourceTweetId))"
        let sourceTweetIdPostEscape = sourceTweetIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{source_tweet_id}", with: sourceTweetIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UsersRetweetsDeleteResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
