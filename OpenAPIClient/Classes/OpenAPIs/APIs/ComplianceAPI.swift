//
// ComplianceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ComplianceAPI {

    /**
     Create compliance job
     
     - parameter inlineObject5: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: SingleComplianceJobResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func createBatchComplianceJob(inlineObject5: InlineObject5, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> SingleComplianceJobResponse {
        return try await withCheckedThrowingContinuation { continuation in
            createBatchComplianceJobWithRequestBuilder(inlineObject5: inlineObject5).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Create compliance job
     - POST /2/compliance/jobs
     - Creates a compliance for the given job type
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter inlineObject5: (body)  
     - returns: RequestBuilder<SingleComplianceJobResponse> 
     */
    open class func createBatchComplianceJobWithRequestBuilder(inlineObject5: InlineObject5) -> RequestBuilder<SingleComplianceJobResponse> {
        let localVariablePath = "/2/compliance/jobs"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineObject5)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SingleComplianceJobResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get compliance job
     
     - parameter id: (path) ID of the compliance job to retrieve. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: SingleComplianceJobResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getBatchComplianceJob(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> SingleComplianceJobResponse {
        return try await withCheckedThrowingContinuation { continuation in
            getBatchComplianceJobWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get compliance job
     - GET /2/compliance/jobs/{id}
     - Returns a single compliance job by ID
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter id: (path) ID of the compliance job to retrieve. 
     - returns: RequestBuilder<SingleComplianceJobResponse> 
     */
    open class func getBatchComplianceJobWithRequestBuilder(id: String) -> RequestBuilder<SingleComplianceJobResponse> {
        var localVariablePath = "/2/compliance/jobs/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SingleComplianceJobResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List compliance jobs
     
     - parameter type: (query) Type of compliance job to list. 
     - parameter status: (query) Status of compliance job to list. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MultiComplianceJobResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listBatchComplianceJobs(type: ComplianceJobType, status: ComplianceJobStatus? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MultiComplianceJobResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listBatchComplianceJobsWithRequestBuilder(type: type, status: status).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     List compliance jobs
     - GET /2/compliance/jobs
     - Returns recent compliance jobs for a given job type and optional job status
     - BASIC:
       - type: http
       - name: BearerToken
     - parameter type: (query) Type of compliance job to list. 
     - parameter status: (query) Status of compliance job to list. (optional)
     - returns: RequestBuilder<MultiComplianceJobResponse> 
     */
    open class func listBatchComplianceJobsWithRequestBuilder(type: ComplianceJobType, status: ComplianceJobStatus? = nil) -> RequestBuilder<MultiComplianceJobResponse> {
        let localVariablePath = "/2/compliance/jobs"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": type.encodeToJSON(),
            "status": status?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiComplianceJobResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
