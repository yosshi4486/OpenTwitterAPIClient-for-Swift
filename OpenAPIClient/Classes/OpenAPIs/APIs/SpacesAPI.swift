//
// SpacesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SpacesAPI {

    /**
     * enum for parameter spaceFields
     */
    public enum SpaceFields_findSpaceById: String, CaseIterable {
        case createdAt = "created_at"
        case creatorId = "creator_id"
        case hostIds = "host_ids"
        case invitedUserIds = "invited_user_ids"
        case isTicketed = "is_ticketed"
        case lang = "lang"
        case participantCount = "participant_count"
        case scheduledStart = "scheduled_start"
        case speakerIds = "speaker_ids"
        case startedAt = "started_at"
        case title = "title"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findSpaceById: String, CaseIterable {
        case creatorId = "creator_id"
        case hostIds = "host_ids"
        case invitedUserIds = "invited_user_ids"
        case speakerIds = "speaker_ids"
    }

    /**
     Space lookup by Space ID
     
     - parameter id: (path) The space id to be retrieved 
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: SingleSpaceLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func findSpaceById(id: String, spaceFields: Set<String>? = nil, expansions: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> SingleSpaceLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            findSpaceByIdWithRequestBuilder(id: id, spaceFields: spaceFields, expansions: expansions).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Space lookup by Space ID
     - GET /2/spaces/{id}
     - Returns a variety of information about the Space specified by the requested ID
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The space id to be retrieved 
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - returns: RequestBuilder<SingleSpaceLookupResponse> 
     */
    open class func findSpaceByIdWithRequestBuilder(id: String, spaceFields: Set<String>? = nil, expansions: Set<String>? = nil) -> RequestBuilder<SingleSpaceLookupResponse> {
        var localVariablePath = "/2/spaces/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "space.fields": spaceFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SingleSpaceLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter spaceFields
     */
    public enum SpaceFields_findSpacesByCreatorIds: String, CaseIterable {
        case createdAt = "created_at"
        case creatorId = "creator_id"
        case hostIds = "host_ids"
        case invitedUserIds = "invited_user_ids"
        case isTicketed = "is_ticketed"
        case lang = "lang"
        case participantCount = "participant_count"
        case scheduledStart = "scheduled_start"
        case speakerIds = "speaker_ids"
        case startedAt = "started_at"
        case title = "title"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findSpacesByCreatorIds: String, CaseIterable {
        case creatorId = "creator_id"
        case hostIds = "host_ids"
        case invitedUserIds = "invited_user_ids"
        case speakerIds = "speaker_ids"
    }

    /**
     Space lookup by their creators
     
     - parameter userIds: (query) The users to search through 
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MultiSpaceLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func findSpacesByCreatorIds(userIds: [String], spaceFields: Set<String>? = nil, expansions: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MultiSpaceLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            findSpacesByCreatorIdsWithRequestBuilder(userIds: userIds, spaceFields: spaceFields, expansions: expansions).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Space lookup by their creators
     - GET /2/spaces/by/creator_ids
     - Returns a variety of information about the Spaces created by the provided User IDs
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter userIds: (query) The users to search through 
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - returns: RequestBuilder<MultiSpaceLookupResponse> 
     */
    open class func findSpacesByCreatorIdsWithRequestBuilder(userIds: [String], spaceFields: Set<String>? = nil, expansions: Set<String>? = nil) -> RequestBuilder<MultiSpaceLookupResponse> {
        let localVariablePath = "/2/spaces/by/creator_ids"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "user_ids": userIds.encodeToJSON(),
            "space.fields": spaceFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiSpaceLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter spaceFields
     */
    public enum SpaceFields_findSpacesByIds: String, CaseIterable {
        case createdAt = "created_at"
        case creatorId = "creator_id"
        case hostIds = "host_ids"
        case invitedUserIds = "invited_user_ids"
        case isTicketed = "is_ticketed"
        case lang = "lang"
        case participantCount = "participant_count"
        case scheduledStart = "scheduled_start"
        case speakerIds = "speaker_ids"
        case startedAt = "started_at"
        case title = "title"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_findSpacesByIds: String, CaseIterable {
        case creatorId = "creator_id"
        case hostIds = "host_ids"
        case invitedUserIds = "invited_user_ids"
        case speakerIds = "speaker_ids"
    }

    /**
     Space lookup up Space IDs
     
     - parameter ids: (query) A list of space ids 
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MultiSpaceLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func findSpacesByIds(ids: [String], spaceFields: Set<String>? = nil, expansions: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MultiSpaceLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            findSpacesByIdsWithRequestBuilder(ids: ids, spaceFields: spaceFields, expansions: expansions).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Space lookup up Space IDs
     - GET /2/spaces
     - Returns a variety of information about the Spaces specified by the requested IDs
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter ids: (query) A list of space ids 
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - returns: RequestBuilder<MultiSpaceLookupResponse> 
     */
    open class func findSpacesByIdsWithRequestBuilder(ids: [String], spaceFields: Set<String>? = nil, expansions: Set<String>? = nil) -> RequestBuilder<MultiSpaceLookupResponse> {
        let localVariablePath = "/2/spaces"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": ids.encodeToJSON(),
            "space.fields": spaceFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiSpaceLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter state
     */
    public enum State_searchSpaces: String, CaseIterable {
        case live = "live"
        case scheduled = "scheduled"
        case all = "all"
    }

    /**
     * enum for parameter spaceFields
     */
    public enum SpaceFields_searchSpaces: String, CaseIterable {
        case createdAt = "created_at"
        case creatorId = "creator_id"
        case hostIds = "host_ids"
        case invitedUserIds = "invited_user_ids"
        case isTicketed = "is_ticketed"
        case lang = "lang"
        case participantCount = "participant_count"
        case scheduledStart = "scheduled_start"
        case speakerIds = "speaker_ids"
        case startedAt = "started_at"
        case title = "title"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_searchSpaces: String, CaseIterable {
        case creatorId = "creator_id"
        case hostIds = "host_ids"
        case invitedUserIds = "invited_user_ids"
        case speakerIds = "speaker_ids"
    }

    /**
     Search for Spaces
     
     - parameter query: (query) The search query 
     - parameter state: (query) The state of spaces to search for (optional, default to .all)
     - parameter maxResults: (query) The number of results to return. The maximum for this value is 100. (optional)
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MultiSpaceLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func searchSpaces(query: String, state: State_searchSpaces? = nil, maxResults: Int? = nil, spaceFields: Set<String>? = nil, expansions: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MultiSpaceLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            searchSpacesWithRequestBuilder(query: query, state: state, maxResults: maxResults, spaceFields: spaceFields, expansions: expansions).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Search for Spaces
     - GET /2/spaces/search
     - Returns Spaces that match the provided query.
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter query: (query) The search query 
     - parameter state: (query) The state of spaces to search for (optional, default to .all)
     - parameter maxResults: (query) The number of results to return. The maximum for this value is 100. (optional)
     - parameter spaceFields: (query) A comma separated list of Space fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - returns: RequestBuilder<MultiSpaceLookupResponse> 
     */
    open class func searchSpacesWithRequestBuilder(query: String, state: State_searchSpaces? = nil, maxResults: Int? = nil, spaceFields: Set<String>? = nil, expansions: Set<String>? = nil) -> RequestBuilder<MultiSpaceLookupResponse> {
        let localVariablePath = "/2/spaces/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": query.encodeToJSON(),
            "state": state?.encodeToJSON(),
            "max_results": maxResults?.encodeToJSON(),
            "space.fields": spaceFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiSpaceLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_spaceBuyers: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     Retrieve the list of users who purchased a ticket to the given space
     
     - parameter id: (path) The space id from which tweets will be retrieved 
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MultiUserLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func spaceBuyers(id: String, userFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MultiUserLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            spaceBuyersWithRequestBuilder(id: id, userFields: userFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Retrieve the list of users who purchased a ticket to the given space
     - GET /2/spaces/{id}/buyers
     - Retrieves the list of users who purchased a ticket to the given space
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The space id from which tweets will be retrieved 
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<MultiUserLookupResponse> 
     */
    open class func spaceBuyersWithRequestBuilder(id: String, userFields: Set<String>? = nil) -> RequestBuilder<MultiUserLookupResponse> {
        var localVariablePath = "/2/spaces/{id}/buyers"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiUserLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
