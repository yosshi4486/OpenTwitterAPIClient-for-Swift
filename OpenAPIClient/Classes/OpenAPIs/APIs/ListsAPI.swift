//
// ListsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ListsAPI {

    /**
     * enum for parameter listFields
     */
    public enum ListFields_getUserListMemberships: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case followerCount = "follower_count"
        case id = "id"
        case memberCount = "member_count"
        case name = "name"
        case ownerId = "owner_id"
        case _private = "private"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_getUserListMemberships: String, CaseIterable {
        case ownerId = "owner_id"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_getUserListMemberships: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     Get a User's List Memberships
     
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MultiListResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getUserListMemberships(id: String, maxResults: Int? = nil, paginationToken: Int64? = nil, listFields: Set<String>? = nil, expansions: Set<String>? = nil, userFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MultiListResponse {
        return try await withCheckedThrowingContinuation { continuation in
            getUserListMembershipsWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, listFields: listFields, expansions: expansions, userFields: userFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get a User's List Memberships
     - GET /2/users/{id}/list_memberships
     - Get a User's List Memberships.
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<MultiListResponse> 
     */
    open class func getUserListMembershipsWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: Int64? = nil, listFields: Set<String>? = nil, expansions: Set<String>? = nil, userFields: Set<String>? = nil) -> RequestBuilder<MultiListResponse> {
        var localVariablePath = "/2/users/{id}/list_memberships"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "list.fields": listFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Add a List member
     
     - parameter id: (path) The ID of the List to add a member 
     - parameter listAddMemberRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ListMemberResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listAddMember(id: String, listAddMemberRequest: ListAddMemberRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ListMemberResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listAddMemberWithRequestBuilder(id: id, listAddMemberRequest: listAddMemberRequest).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Add a List member
     - POST /2/lists/{id}/members
     - Causes a user to become a member of a List.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List to add a member 
     - parameter listAddMemberRequest: (body)  (optional)
     - returns: RequestBuilder<ListMemberResponse> 
     */
    open class func listAddMemberWithRequestBuilder(id: String, listAddMemberRequest: ListAddMemberRequest? = nil) -> RequestBuilder<ListMemberResponse> {
        var localVariablePath = "/2/lists/{id}/members"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listAddMemberRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListMemberResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create List
     
     - parameter listCreateRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ListCreateResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listIdCreate(listCreateRequest: ListCreateRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ListCreateResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listIdCreateWithRequestBuilder(listCreateRequest: listCreateRequest).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Create List
     - POST /2/lists
     - Creates a new List.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter listCreateRequest: (body)  (optional)
     - returns: RequestBuilder<ListCreateResponse> 
     */
    open class func listIdCreateWithRequestBuilder(listCreateRequest: ListCreateRequest? = nil) -> RequestBuilder<ListCreateResponse> {
        let localVariablePath = "/2/lists"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListCreateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete List
     
     - parameter id: (path) The ID of the List to delete 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ListDeleteResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listIdDelete(id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ListDeleteResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listIdDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Delete List
     - DELETE /2/lists/{id}
     - Delete a List that you own.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List to delete 
     - returns: RequestBuilder<ListDeleteResponse> 
     */
    open class func listIdDeleteWithRequestBuilder(id: String) -> RequestBuilder<ListDeleteResponse> {
        var localVariablePath = "/2/lists/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListDeleteResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter listFields
     */
    public enum ListFields_listIdGet: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case followerCount = "follower_count"
        case id = "id"
        case memberCount = "member_count"
        case name = "name"
        case ownerId = "owner_id"
        case _private = "private"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_listIdGet: String, CaseIterable {
        case ownerId = "owner_id"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_listIdGet: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     List lookup by List ID
     
     - parameter id: (path) The ID of the List to get 
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: SingleListLookupResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listIdGet(id: String, listFields: Set<String>? = nil, expansions: Set<String>? = nil, userFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> SingleListLookupResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listIdGetWithRequestBuilder(id: id, listFields: listFields, expansions: expansions, userFields: userFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     List lookup by List ID
     - GET /2/lists/{id}
     - Returns a List
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List to get 
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<SingleListLookupResponse> 
     */
    open class func listIdGetWithRequestBuilder(id: String, listFields: Set<String>? = nil, expansions: Set<String>? = nil, userFields: Set<String>? = nil) -> RequestBuilder<SingleListLookupResponse> {
        var localVariablePath = "/2/lists/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "list.fields": listFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SingleListLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update List
     
     - parameter id: (path) The ID of the List to modify 
     - parameter listUpdateRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ListUpdateResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listIdUpdate(id: String, listUpdateRequest: ListUpdateRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ListUpdateResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listIdUpdateWithRequestBuilder(id: id, listUpdateRequest: listUpdateRequest).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Update List
     - PUT /2/lists/{id}
     - Update a List that you own.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List to modify 
     - parameter listUpdateRequest: (body)  (optional)
     - returns: RequestBuilder<ListUpdateResponse> 
     */
    open class func listIdUpdateWithRequestBuilder(id: String, listUpdateRequest: ListUpdateRequest? = nil) -> RequestBuilder<ListUpdateResponse> {
        var localVariablePath = "/2/lists/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListUpdateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Remove a List member
     
     - parameter id: (path) The ID of the List to remove a member 
     - parameter userId: (path) The ID of user that will be removed from the List 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ListMemberResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listRemoveMember(id: String, userId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ListMemberResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listRemoveMemberWithRequestBuilder(id: id, userId: userId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Remove a List member
     - DELETE /2/lists/{id}/members/{user_id}
     - Causes a user to be removed from the members of a List.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the List to remove a member 
     - parameter userId: (path) The ID of user that will be removed from the List 
     - returns: RequestBuilder<ListMemberResponse> 
     */
    open class func listRemoveMemberWithRequestBuilder(id: String, userId: String) -> RequestBuilder<ListMemberResponse> {
        var localVariablePath = "/2/lists/{id}/members/{user_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListMemberResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Follow a List
     
     - parameter id: (path) The ID of the authenticated source user that will follow the List 
     - parameter listFollowRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ListFollowedResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listUserFollow(id: String, listFollowRequest: ListFollowRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ListFollowedResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listUserFollowWithRequestBuilder(id: id, listFollowRequest: listFollowRequest).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Follow a List
     - POST /2/users/{id}/followed_lists
     - Causes a user to follow a List.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source user that will follow the List 
     - parameter listFollowRequest: (body)  (optional)
     - returns: RequestBuilder<ListFollowedResponse> 
     */
    open class func listUserFollowWithRequestBuilder(id: String, listFollowRequest: ListFollowRequest? = nil) -> RequestBuilder<ListFollowedResponse> {
        var localVariablePath = "/2/users/{id}/followed_lists"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listFollowRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListFollowedResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter listFields
     */
    public enum ListFields_listUserOwnedLists: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case followerCount = "follower_count"
        case id = "id"
        case memberCount = "member_count"
        case name = "name"
        case ownerId = "owner_id"
        case _private = "private"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_listUserOwnedLists: String, CaseIterable {
        case ownerId = "owner_id"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_listUserOwnedLists: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     Get a User's Owned Lists
     
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MultiListResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listUserOwnedLists(id: String, maxResults: Int? = nil, paginationToken: Int64? = nil, listFields: Set<String>? = nil, expansions: Set<String>? = nil, userFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MultiListResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listUserOwnedListsWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, listFields: listFields, expansions: expansions, userFields: userFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get a User's Owned Lists
     - GET /2/users/{id}/owned_lists
     - Get a User's Owned Lists.
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<MultiListResponse> 
     */
    open class func listUserOwnedListsWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: Int64? = nil, listFields: Set<String>? = nil, expansions: Set<String>? = nil, userFields: Set<String>? = nil) -> RequestBuilder<MultiListResponse> {
        var localVariablePath = "/2/users/{id}/owned_lists"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "list.fields": listFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Pin a List
     
     - parameter id: (path) The ID of the authenticated source user that will pin the List 
     - parameter listPinRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ListPinnedResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listUserPin(id: String, listPinRequest: ListPinRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ListPinnedResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listUserPinWithRequestBuilder(id: id, listPinRequest: listPinRequest).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Pin a List
     - POST /2/users/{id}/pinned_lists
     - Causes a user to pin a List.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source user that will pin the List 
     - parameter listPinRequest: (body)  (optional)
     - returns: RequestBuilder<ListPinnedResponse> 
     */
    open class func listUserPinWithRequestBuilder(id: String, listPinRequest: ListPinRequest? = nil) -> RequestBuilder<ListPinnedResponse> {
        var localVariablePath = "/2/users/{id}/pinned_lists"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listPinRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListPinnedResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter listFields
     */
    public enum ListFields_listUserPinnedLists: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case followerCount = "follower_count"
        case id = "id"
        case memberCount = "member_count"
        case name = "name"
        case ownerId = "owner_id"
        case _private = "private"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_listUserPinnedLists: String, CaseIterable {
        case ownerId = "owner_id"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_listUserPinnedLists: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     Get a User's Pinned Lists
     
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MultiListNoPaginationResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listUserPinnedLists(id: String, listFields: Set<String>? = nil, expansions: Set<String>? = nil, userFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MultiListNoPaginationResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listUserPinnedListsWithRequestBuilder(id: id, listFields: listFields, expansions: expansions, userFields: userFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get a User's Pinned Lists
     - GET /2/users/{id}/pinned_lists
     - Get a User's Pinned Lists.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<MultiListNoPaginationResponse> 
     */
    open class func listUserPinnedListsWithRequestBuilder(id: String, listFields: Set<String>? = nil, expansions: Set<String>? = nil, userFields: Set<String>? = nil) -> RequestBuilder<MultiListNoPaginationResponse> {
        var localVariablePath = "/2/users/{id}/pinned_lists"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "list.fields": listFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiListNoPaginationResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unfollow a List
     
     - parameter id: (path) The ID of the authenticated source user that will unfollow the List 
     - parameter listId: (path) The ID of the List to unfollow 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ListFollowedResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listUserUnfollow(id: String, listId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ListFollowedResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listUserUnfollowWithRequestBuilder(id: id, listId: listId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Unfollow a List
     - DELETE /2/users/{id}/followed_lists/{list_id}
     - Causes a user to unfollow a List.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source user that will unfollow the List 
     - parameter listId: (path) The ID of the List to unfollow 
     - returns: RequestBuilder<ListFollowedResponse> 
     */
    open class func listUserUnfollowWithRequestBuilder(id: String, listId: String) -> RequestBuilder<ListFollowedResponse> {
        var localVariablePath = "/2/users/{id}/followed_lists/{list_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListFollowedResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unpin a List
     
     - parameter id: (path) The ID of the authenticated source user that will remove the pinned List 
     - parameter listId: (path) The ID of the List to unpin 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ListPinnedResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func listUserUnpin(id: String, listId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ListPinnedResponse {
        return try await withCheckedThrowingContinuation { continuation in
            listUserUnpinWithRequestBuilder(id: id, listId: listId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Unpin a List
     - DELETE /2/users/{id}/pinned_lists/{list_id}
     - Causes a user to remove a pinned List.
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the authenticated source user that will remove the pinned List 
     - parameter listId: (path) The ID of the List to unpin 
     - returns: RequestBuilder<ListPinnedResponse> 
     */
    open class func listUserUnpinWithRequestBuilder(id: String, listId: String) -> RequestBuilder<ListPinnedResponse> {
        var localVariablePath = "/2/users/{id}/pinned_lists/{list_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let listIdPreEscape = "\(APIHelper.mapValueToPathItem(listId))"
        let listIdPostEscape = listIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{list_id}", with: listIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListPinnedResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter listFields
     */
    public enum ListFields_userFollowedLists: String, CaseIterable {
        case createdAt = "created_at"
        case description = "description"
        case followerCount = "follower_count"
        case id = "id"
        case memberCount = "member_count"
        case name = "name"
        case ownerId = "owner_id"
        case _private = "private"
    }

    /**
     * enum for parameter expansions
     */
    public enum Expansions_userFollowedLists: String, CaseIterable {
        case ownerId = "owner_id"
    }

    /**
     * enum for parameter userFields
     */
    public enum UserFields_userFollowedLists: String, CaseIterable {
        case id = "id"
        case createdAt = "created_at"
        case name = "name"
        case username = "username"
        case protected = "protected"
        case verified = "verified"
        case withheld = "withheld"
        case profileImageUrl = "profile_image_url"
        case location = "location"
        case url = "url"
        case description = "description"
        case entities = "entities"
        case pinnedTweetId = "pinned_tweet_id"
        case publicMetrics = "public_metrics"
    }

    /**
     Get User's Followed Lists
     
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: MultiListResponse
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func userFollowedLists(id: String, maxResults: Int? = nil, paginationToken: Int64? = nil, listFields: Set<String>? = nil, expansions: Set<String>? = nil, userFields: Set<String>? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> MultiListResponse {
        return try await withCheckedThrowingContinuation { continuation in
            userFollowedListsWithRequestBuilder(id: id, maxResults: maxResults, paginationToken: paginationToken, listFields: listFields, expansions: expansions, userFields: userFields).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Get User's Followed Lists
     - GET /2/users/{id}/followed_lists
     - Returns a user's followed Lists.
     - BASIC:
       - type: http
       - name: BearerToken
     - BASIC:
       - type: http
       - name: UserToken
     - parameter id: (path) The ID of the user for whom to return results 
     - parameter maxResults: (query) The maximum number of results (optional, default to 100)
     - parameter paginationToken: (query) This parameter is used to get a specified &#39;page&#39; of results. (optional)
     - parameter listFields: (query) A comma separated list of List fields to display. (optional)
     - parameter expansions: (query) A comma separated list of fields to expand. (optional)
     - parameter userFields: (query) A comma separated list of User fields to display. (optional)
     - returns: RequestBuilder<MultiListResponse> 
     */
    open class func userFollowedListsWithRequestBuilder(id: String, maxResults: Int? = nil, paginationToken: Int64? = nil, listFields: Set<String>? = nil, expansions: Set<String>? = nil, userFields: Set<String>? = nil) -> RequestBuilder<MultiListResponse> {
        var localVariablePath = "/2/users/{id}/followed_lists"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(),
            "pagination_token": paginationToken?.encodeToJSON(),
            "list.fields": listFields?.encodeToJSON(),
            "expansions": expansions?.encodeToJSON(),
            "user.fields": userFields?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MultiListResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
