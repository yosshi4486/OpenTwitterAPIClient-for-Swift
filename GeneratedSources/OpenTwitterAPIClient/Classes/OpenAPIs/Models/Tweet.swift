//
// Tweet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Tweet: Codable, JSONEncodable, Hashable {

    public var attachments: TweetAttachments?
    /** Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. */
    public var authorId: String?
    public var contextAnnotations: [ContextAnnotation]?
    /** Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. */
    public var conversationId: String?
    /** Creation time of the Tweet. */
    public var createdAt: Date?
    public var entities: FullTextEntities?
    public var geo: TweetGeo?
    /** Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. */
    public var id: String
    /** Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers. */
    public var inReplyToUserId: String?
    /** Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag. */
    public var lang: String?
    public var nonPublicMetrics: TweetNonPublicMetrics?
    public var organicMetrics: TweetOrganicMetrics?
    /** Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences. */
    public var possiblySensitive: Bool?
    public var promotedMetrics: TweetPromotedMetrics?
    public var publicMetrics: TweetPublicMetrics?
    /** A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent. */
    public var referencedTweets: [TweetReferencedTweetsInner]?
    public var replySettings: ReplySettings?
    /** The name of the app the user Tweeted from. */
    public var source: String?
    /** The content of the Tweet. */
    public var text: String
    public var withheld: TweetWithheld?

    public init(attachments: TweetAttachments? = nil, authorId: String? = nil, contextAnnotations: [ContextAnnotation]? = nil, conversationId: String? = nil, createdAt: Date? = nil, entities: FullTextEntities? = nil, geo: TweetGeo? = nil, id: String, inReplyToUserId: String? = nil, lang: String? = nil, nonPublicMetrics: TweetNonPublicMetrics? = nil, organicMetrics: TweetOrganicMetrics? = nil, possiblySensitive: Bool? = nil, promotedMetrics: TweetPromotedMetrics? = nil, publicMetrics: TweetPublicMetrics? = nil, referencedTweets: [TweetReferencedTweetsInner]? = nil, replySettings: ReplySettings? = nil, source: String? = nil, text: String, withheld: TweetWithheld? = nil) {
        self.attachments = attachments
        self.authorId = authorId
        self.contextAnnotations = contextAnnotations
        self.conversationId = conversationId
        self.createdAt = createdAt
        self.entities = entities
        self.geo = geo
        self.id = id
        self.inReplyToUserId = inReplyToUserId
        self.lang = lang
        self.nonPublicMetrics = nonPublicMetrics
        self.organicMetrics = organicMetrics
        self.possiblySensitive = possiblySensitive
        self.promotedMetrics = promotedMetrics
        self.publicMetrics = publicMetrics
        self.referencedTweets = referencedTweets
        self.replySettings = replySettings
        self.source = source
        self.text = text
        self.withheld = withheld
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attachments
        case authorId = "author_id"
        case contextAnnotations = "context_annotations"
        case conversationId = "conversation_id"
        case createdAt = "created_at"
        case entities
        case geo
        case id
        case inReplyToUserId = "in_reply_to_user_id"
        case lang
        case nonPublicMetrics = "non_public_metrics"
        case organicMetrics = "organic_metrics"
        case possiblySensitive = "possibly_sensitive"
        case promotedMetrics = "promoted_metrics"
        case publicMetrics = "public_metrics"
        case referencedTweets = "referenced_tweets"
        case replySettings = "reply_settings"
        case source
        case text
        case withheld
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(attachments, forKey: .attachments)
        try container.encodeIfPresent(authorId, forKey: .authorId)
        try container.encodeIfPresent(contextAnnotations, forKey: .contextAnnotations)
        try container.encodeIfPresent(conversationId, forKey: .conversationId)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(entities, forKey: .entities)
        try container.encodeIfPresent(geo, forKey: .geo)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(inReplyToUserId, forKey: .inReplyToUserId)
        try container.encodeIfPresent(lang, forKey: .lang)
        try container.encodeIfPresent(nonPublicMetrics, forKey: .nonPublicMetrics)
        try container.encodeIfPresent(organicMetrics, forKey: .organicMetrics)
        try container.encodeIfPresent(possiblySensitive, forKey: .possiblySensitive)
        try container.encodeIfPresent(promotedMetrics, forKey: .promotedMetrics)
        try container.encodeIfPresent(publicMetrics, forKey: .publicMetrics)
        try container.encodeIfPresent(referencedTweets, forKey: .referencedTweets)
        try container.encodeIfPresent(replySettings, forKey: .replySettings)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encode(text, forKey: .text)
        try container.encodeIfPresent(withheld, forKey: .withheld)
    }
}

